

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Fri Dec 25 12:37:38 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	text13,local,class=CODE,merge=1,delta=2
    22                           	psect	text14,local,class=CODE,merge=1,delta=2
    23                           	psect	text15,local,class=CODE,merge=1,delta=2
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 2.20
    28                           ; Generated 12/02/2020 GMT
    29                           ; 
    30                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F877A Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0008                     	;# 
    70  0009                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  000D                     	;# 
    75  000E                     	;# 
    76  000E                     	;# 
    77  000F                     	;# 
    78  0010                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0013                     	;# 
    82  0014                     	;# 
    83  0015                     	;# 
    84  0015                     	;# 
    85  0016                     	;# 
    86  0017                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001B                     	;# 
    91  001B                     	;# 
    92  001C                     	;# 
    93  001D                     	;# 
    94  001E                     	;# 
    95  001F                     	;# 
    96  0081                     	;# 
    97  0085                     	;# 
    98  0086                     	;# 
    99  0087                     	;# 
   100  0088                     	;# 
   101  0089                     	;# 
   102  008C                     	;# 
   103  008D                     	;# 
   104  008E                     	;# 
   105  0091                     	;# 
   106  0092                     	;# 
   107  0093                     	;# 
   108  0094                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010E                     	;# 
   118  010F                     	;# 
   119  018C                     	;# 
   120  018D                     	;# 
   121  0000                     	;# 
   122  0001                     	;# 
   123  0002                     	;# 
   124  0003                     	;# 
   125  0004                     	;# 
   126  0005                     	;# 
   127  0006                     	;# 
   128  0007                     	;# 
   129  0008                     	;# 
   130  0009                     	;# 
   131  000A                     	;# 
   132  000B                     	;# 
   133  000C                     	;# 
   134  000D                     	;# 
   135  000E                     	;# 
   136  000E                     	;# 
   137  000F                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0014                     	;# 
   143  0015                     	;# 
   144  0015                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  001A                     	;# 
   150  001B                     	;# 
   151  001B                     	;# 
   152  001C                     	;# 
   153  001D                     	;# 
   154  001E                     	;# 
   155  001F                     	;# 
   156  0081                     	;# 
   157  0085                     	;# 
   158  0086                     	;# 
   159  0087                     	;# 
   160  0088                     	;# 
   161  0089                     	;# 
   162  008C                     	;# 
   163  008D                     	;# 
   164  008E                     	;# 
   165  0091                     	;# 
   166  0092                     	;# 
   167  0093                     	;# 
   168  0094                     	;# 
   169  0098                     	;# 
   170  0099                     	;# 
   171  009C                     	;# 
   172  009D                     	;# 
   173  009E                     	;# 
   174  009F                     	;# 
   175  010C                     	;# 
   176  010D                     	;# 
   177  010E                     	;# 
   178  010F                     	;# 
   179  018C                     	;# 
   180  018D                     	;# 
   181  0000                     	;# 
   182  0001                     	;# 
   183  0002                     	;# 
   184  0003                     	;# 
   185  0004                     	;# 
   186  0005                     	;# 
   187  0006                     	;# 
   188  0007                     	;# 
   189  0008                     	;# 
   190  0009                     	;# 
   191  000A                     	;# 
   192  000B                     	;# 
   193  000C                     	;# 
   194  000D                     	;# 
   195  000E                     	;# 
   196  000E                     	;# 
   197  000F                     	;# 
   198  0010                     	;# 
   199  0011                     	;# 
   200  0012                     	;# 
   201  0013                     	;# 
   202  0014                     	;# 
   203  0015                     	;# 
   204  0015                     	;# 
   205  0016                     	;# 
   206  0017                     	;# 
   207  0018                     	;# 
   208  0019                     	;# 
   209  001A                     	;# 
   210  001B                     	;# 
   211  001B                     	;# 
   212  001C                     	;# 
   213  001D                     	;# 
   214  001E                     	;# 
   215  001F                     	;# 
   216  0081                     	;# 
   217  0085                     	;# 
   218  0086                     	;# 
   219  0087                     	;# 
   220  0088                     	;# 
   221  0089                     	;# 
   222  008C                     	;# 
   223  008D                     	;# 
   224  008E                     	;# 
   225  0091                     	;# 
   226  0092                     	;# 
   227  0093                     	;# 
   228  0094                     	;# 
   229  0098                     	;# 
   230  0099                     	;# 
   231  009C                     	;# 
   232  009D                     	;# 
   233  009E                     	;# 
   234  009F                     	;# 
   235  010C                     	;# 
   236  010D                     	;# 
   237  010E                     	;# 
   238  010F                     	;# 
   239  018C                     	;# 
   240  018D                     	;# 
   241  0000                     	;# 
   242  0001                     	;# 
   243  0002                     	;# 
   244  0003                     	;# 
   245  0004                     	;# 
   246  0005                     	;# 
   247  0006                     	;# 
   248  0007                     	;# 
   249  0008                     	;# 
   250  0009                     	;# 
   251  000A                     	;# 
   252  000B                     	;# 
   253  000C                     	;# 
   254  000D                     	;# 
   255  000E                     	;# 
   256  000E                     	;# 
   257  000F                     	;# 
   258  0010                     	;# 
   259  0011                     	;# 
   260  0012                     	;# 
   261  0013                     	;# 
   262  0014                     	;# 
   263  0015                     	;# 
   264  0015                     	;# 
   265  0016                     	;# 
   266  0017                     	;# 
   267  0018                     	;# 
   268  0019                     	;# 
   269  001A                     	;# 
   270  001B                     	;# 
   271  001B                     	;# 
   272  001C                     	;# 
   273  001D                     	;# 
   274  001E                     	;# 
   275  001F                     	;# 
   276  0081                     	;# 
   277  0085                     	;# 
   278  0086                     	;# 
   279  0087                     	;# 
   280  0088                     	;# 
   281  0089                     	;# 
   282  008C                     	;# 
   283  008D                     	;# 
   284  008E                     	;# 
   285  0091                     	;# 
   286  0092                     	;# 
   287  0093                     	;# 
   288  0094                     	;# 
   289  0098                     	;# 
   290  0099                     	;# 
   291  009C                     	;# 
   292  009D                     	;# 
   293  009E                     	;# 
   294  009F                     	;# 
   295  010C                     	;# 
   296  010D                     	;# 
   297  010E                     	;# 
   298  010F                     	;# 
   299  018C                     	;# 
   300  018D                     	;# 
   301  0000                     	;# 
   302  0001                     	;# 
   303  0002                     	;# 
   304  0003                     	;# 
   305  0004                     	;# 
   306  0005                     	;# 
   307  0006                     	;# 
   308  0007                     	;# 
   309  0008                     	;# 
   310  0009                     	;# 
   311  000A                     	;# 
   312  000B                     	;# 
   313  000C                     	;# 
   314  000D                     	;# 
   315  000E                     	;# 
   316  000E                     	;# 
   317  000F                     	;# 
   318  0010                     	;# 
   319  0011                     	;# 
   320  0012                     	;# 
   321  0013                     	;# 
   322  0014                     	;# 
   323  0015                     	;# 
   324  0015                     	;# 
   325  0016                     	;# 
   326  0017                     	;# 
   327  0018                     	;# 
   328  0019                     	;# 
   329  001A                     	;# 
   330  001B                     	;# 
   331  001B                     	;# 
   332  001C                     	;# 
   333  001D                     	;# 
   334  001E                     	;# 
   335  001F                     	;# 
   336  0081                     	;# 
   337  0085                     	;# 
   338  0086                     	;# 
   339  0087                     	;# 
   340  0088                     	;# 
   341  0089                     	;# 
   342  008C                     	;# 
   343  008D                     	;# 
   344  008E                     	;# 
   345  0091                     	;# 
   346  0092                     	;# 
   347  0093                     	;# 
   348  0094                     	;# 
   349  0098                     	;# 
   350  0099                     	;# 
   351  009C                     	;# 
   352  009D                     	;# 
   353  009E                     	;# 
   354  009F                     	;# 
   355  010C                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  018C                     	;# 
   360  018D                     	;# 
   361  0000                     	;# 
   362  0001                     	;# 
   363  0002                     	;# 
   364  0003                     	;# 
   365  0004                     	;# 
   366  0005                     	;# 
   367  0006                     	;# 
   368  0007                     	;# 
   369  0008                     	;# 
   370  0009                     	;# 
   371  000A                     	;# 
   372  000B                     	;# 
   373  000C                     	;# 
   374  000D                     	;# 
   375  000E                     	;# 
   376  000E                     	;# 
   377  000F                     	;# 
   378  0010                     	;# 
   379  0011                     	;# 
   380  0012                     	;# 
   381  0013                     	;# 
   382  0014                     	;# 
   383  0015                     	;# 
   384  0015                     	;# 
   385  0016                     	;# 
   386  0017                     	;# 
   387  0018                     	;# 
   388  0019                     	;# 
   389  001A                     	;# 
   390  001B                     	;# 
   391  001B                     	;# 
   392  001C                     	;# 
   393  001D                     	;# 
   394  001E                     	;# 
   395  001F                     	;# 
   396  0081                     	;# 
   397  0085                     	;# 
   398  0086                     	;# 
   399  0087                     	;# 
   400  0088                     	;# 
   401  0089                     	;# 
   402  008C                     	;# 
   403  008D                     	;# 
   404  008E                     	;# 
   405  0091                     	;# 
   406  0092                     	;# 
   407  0093                     	;# 
   408  0094                     	;# 
   409  0098                     	;# 
   410  0099                     	;# 
   411  009C                     	;# 
   412  009D                     	;# 
   413  009E                     	;# 
   414  009F                     	;# 
   415  010C                     	;# 
   416  010D                     	;# 
   417  010E                     	;# 
   418  010F                     	;# 
   419  018C                     	;# 
   420  018D                     	;# 
   421  0000                     	;# 
   422  0001                     	;# 
   423  0002                     	;# 
   424  0003                     	;# 
   425  0004                     	;# 
   426  0005                     	;# 
   427  0006                     	;# 
   428  0007                     	;# 
   429  0008                     	;# 
   430  0009                     	;# 
   431  000A                     	;# 
   432  000B                     	;# 
   433  000C                     	;# 
   434  000D                     	;# 
   435  000E                     	;# 
   436  000E                     	;# 
   437  000F                     	;# 
   438  0010                     	;# 
   439  0011                     	;# 
   440  0012                     	;# 
   441  0013                     	;# 
   442  0014                     	;# 
   443  0015                     	;# 
   444  0015                     	;# 
   445  0016                     	;# 
   446  0017                     	;# 
   447  0018                     	;# 
   448  0019                     	;# 
   449  001A                     	;# 
   450  001B                     	;# 
   451  001B                     	;# 
   452  001C                     	;# 
   453  001D                     	;# 
   454  001E                     	;# 
   455  001F                     	;# 
   456  0081                     	;# 
   457  0085                     	;# 
   458  0086                     	;# 
   459  0087                     	;# 
   460  0088                     	;# 
   461  0089                     	;# 
   462  008C                     	;# 
   463  008D                     	;# 
   464  008E                     	;# 
   465  0091                     	;# 
   466  0092                     	;# 
   467  0093                     	;# 
   468  0094                     	;# 
   469  0098                     	;# 
   470  0099                     	;# 
   471  009C                     	;# 
   472  009D                     	;# 
   473  009E                     	;# 
   474  009F                     	;# 
   475  010C                     	;# 
   476  010D                     	;# 
   477  010E                     	;# 
   478  010F                     	;# 
   479  018C                     	;# 
   480  018D                     	;# 
   481  0015                     _CCPR1L	set	21
   482  001E                     _ADRESH	set	30
   483  005F                     _GIE	set	95
   484  0032                     _RB2	set	50
   485  0031                     _RB1	set	49
   486  0047                     _RD7	set	71
   487  0046                     _RD6	set	70
   488  0045                     _RD5	set	69
   489  0044                     _RD4	set	68
   490  0033                     _RB3	set	51
   491  00BD                     _CCP1X	set	189
   492  00BC                     _CCP1Y	set	188
   493  0092                     _TMR2ON	set	146
   494  0091                     _T2CKPS1	set	145
   495  0090                     _T2CKPS0	set	144
   496  00BB                     _CCP1M3	set	187
   497  00BA                     _CCP1M2	set	186
   498  00FA                     _GO_DONE	set	250
   499  00FD                     _CHS2	set	253
   500  00FC                     _CHS1	set	252
   501  00FB                     _CHS0	set	251
   502  00F8                     _ADON	set	248
   503  00FF                     _ADCS1	set	255
   504  00FE                     _ADCS0	set	254
   505  0092                     _PR2	set	146
   506  009E                     _ADRESL	set	158
   507  0087                     _TRISC	set	135
   508  0086                     _TRISB	set	134
   509  0088                     _TRISD	set	136
   510  043A                     _TRISC2	set	1082
   511  04FB                     _PCFG3	set	1275
   512  04FA                     _PCFG2	set	1274
   513  04F9                     _PCFG1	set	1273
   514  04F8                     _PCFG0	set	1272
   515  04FE                     _ADCS2	set	1278
   516  04FF                     _ADFM	set	1279
   517  010C                     _EEDATA	set	268
   518  010D                     _EEADR	set	269
   519  018D                     _EECON2	set	397
   520  018C                     _EECON1bits	set	396
   521  0C61                     _WR	set	3169
   522  0C67                     _EEPGD	set	3175
   523                           
   524                           	psect	strings
   525  0003                     __pstrings:
   526  0003                     stringtab:
   527  0003                     __stringtab:
   528  0003                     stringcode:	
   529                           ;	String table - string pointers are 1 byte each
   530                           
   531  0003                     stringdir:
   532  0003  3000               	movlw	high stringdir
   533  0004  008A               	movwf	10
   534  0005  0804               	movf	4,w
   535  0006  0A84               	incf	4,f
   536  0007  0782               	addwf	2,f
   537  0008                     __stringbase:
   538  0008  3400               	retlw	0
   539  0009                     __end_of__stringtab:
   540  0009                     STR_1:
   541  0009  344C               	retlw	76	;'L'
   542  000A  3449               	retlw	73	;'I'
   543  000B  3447               	retlw	71	;'G'
   544  000C  3448               	retlw	72	;'H'
   545  000D  3454               	retlw	84	;'T'
   546  000E  342D               	retlw	45	;'-'
   547  000F  342D               	retlw	45	;'-'
   548  0010  3400               	retlw	0
   549  0011                     STR_2:
   550  0011  3444               	retlw	68	;'D'
   551  0012  3441               	retlw	65	;'A'
   552  0013  3452               	retlw	82	;'R'
   553  0014  344B               	retlw	75	;'K'
   554  0015  342D               	retlw	45	;'-'
   555  0016  342D               	retlw	45	;'-'
   556  0017  3400               	retlw	0
   557                           
   558                           	psect	cinit
   559  07FC                     start_initialization:	
   560                           ; #config settings
   561                           
   562  07FC                     __initialization:
   563  07FC                     end_of_initialization:	
   564                           ;End of C runtime variable initialization code
   565                           
   566  07FC                     __end_of__initialization:
   567  07FC  0183               	clrf	3
   568  07FD  120A  118A  2DAC   	ljmp	_main	;jump to C main() function
   569                           
   570                           	psect	cstackCOMMON
   571  0070                     __pcstackCOMMON:
   572  0070                     ?_Lcd_Clear:
   573  0070                     ?_Lcd_Write_String:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0070                     ?_Lcd_Init:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0070                     ?_init_ADC:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0070                     ??_init_ADC:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0070                     ?_init_PWM:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0070                     ??_init_PWM:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0070                     ?_Servocontrol:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0070                     ?_main:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0070                     ?_Lcd_Port:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  0070                     ??_Lcd_Port:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0070                     ?_Lcd_Cmd:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0070                     ?_Lcd_Write_Char:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  0070                     ?_ADC_Read:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0070                     ?___awdiv:	
   613                           ; 2 bytes @ 0x0
   614                           
   615  0070                     Lcd_Port@a:	
   616                           ; 2 bytes @ 0x0
   617                           
   618  0070                     ___awdiv@divisor:	
   619                           ; 1 bytes @ 0x0
   620                           
   621                           
   622                           ; 2 bytes @ 0x0
   623  0070                     	ds	1
   624  0071                     ??_Lcd_Cmd:
   625  0071                     ??_Lcd_Write_Char:	
   626                           ; 1 bytes @ 0x1
   627                           
   628                           
   629                           ; 1 bytes @ 0x1
   630  0071                     	ds	1
   631  0072                     ??_ADC_Read:
   632  0072                     Lcd_Write_Char@temp:	
   633                           ; 1 bytes @ 0x2
   634                           
   635  0072                     ___awdiv@dividend:	
   636                           ; 1 bytes @ 0x2
   637                           
   638                           
   639                           ; 2 bytes @ 0x2
   640  0072                     	ds	1
   641  0073                     Lcd_Cmd@a:
   642  0073                     Lcd_Write_Char@y:	
   643                           ; 1 bytes @ 0x3
   644                           
   645  0073                     ADC_Read@result:	
   646                           ; 1 bytes @ 0x3
   647                           
   648                           
   649                           ; 2 bytes @ 0x3
   650  0073                     	ds	1
   651  0074                     ??_Lcd_Clear:
   652  0074                     ?_Lcd_Set_Cursor:	
   653                           ; 1 bytes @ 0x4
   654                           
   655  0074                     ??_Lcd_Init:	
   656                           ; 1 bytes @ 0x4
   657                           
   658  0074                     ??___awdiv:	
   659                           ; 1 bytes @ 0x4
   660                           
   661  0074                     Lcd_Set_Cursor@b:	
   662                           ; 1 bytes @ 0x4
   663                           
   664  0074                     Lcd_Write_Char@a:	
   665                           ; 1 bytes @ 0x4
   666                           
   667                           
   668                           ; 1 bytes @ 0x4
   669  0074                     	ds	1
   670  0075                     ??_Lcd_Set_Cursor:
   671  0075                     ??_Lcd_Write_String:	
   672                           ; 1 bytes @ 0x5
   673                           
   674  0075                     ADC_Read@ADC_channel:	
   675                           ; 1 bytes @ 0x5
   676                           
   677  0075                     ___awdiv@counter:	
   678                           ; 1 bytes @ 0x5
   679                           
   680  0075                     Lcd_Write_String@i:	
   681                           ; 1 bytes @ 0x5
   682                           
   683                           
   684                           ; 2 bytes @ 0x5
   685  0075                     	ds	1
   686  0076                     ?_setPWM_DutyCycle:
   687  0076                     ___awdiv@sign:	
   688                           ; 1 bytes @ 0x6
   689                           
   690  0076                     setPWM_DutyCycle@DC:	
   691                           ; 1 bytes @ 0x6
   692                           
   693                           
   694                           ; 2 bytes @ 0x6
   695  0076                     	ds	1
   696  0077                     Lcd_Set_Cursor@a:
   697  0077                     Lcd_Write_String@a:	
   698                           ; 1 bytes @ 0x7
   699                           
   700  0077                     ___awdiv@quotient:	
   701                           ; 1 bytes @ 0x7
   702                           
   703                           
   704                           ; 2 bytes @ 0x7
   705  0077                     	ds	1
   706  0078                     ??_setPWM_DutyCycle:
   707  0078                     Lcd_Set_Cursor@z:	
   708                           ; 1 bytes @ 0x8
   709                           
   710                           
   711                           ; 1 bytes @ 0x8
   712  0078                     	ds	1
   713  0079                     ?_tsDelay:
   714  0079                     Lcd_Set_Cursor@y:	
   715                           ; 1 bytes @ 0x9
   716                           
   717  0079                     tsDelay@d:	
   718                           ; 1 bytes @ 0x9
   719                           
   720                           
   721                           ; 2 bytes @ 0x9
   722  0079                     	ds	1
   723  007A                     Lcd_Set_Cursor@temp:
   724                           
   725                           ; 1 bytes @ 0xA
   726  007A                     	ds	1
   727  007B                     ??_tsDelay:
   728                           
   729                           ; 1 bytes @ 0xB
   730  007B                     	ds	2
   731                           
   732                           	psect	cstackBANK0
   733  0020                     __pcstackBANK0:
   734  0020                     tsDelay@delay:
   735                           
   736                           ; 2 bytes @ 0x0
   737  0020                     	ds	2
   738  0022                     ?_tsSetPulse:
   739  0022                     tsSetPulse@p1:	
   740                           ; 1 bytes @ 0x2
   741                           
   742                           
   743                           ; 2 bytes @ 0x2
   744  0022                     	ds	2
   745  0024                     tsSetPulse@p2:
   746                           
   747                           ; 2 bytes @ 0x4
   748  0024                     	ds	2
   749  0026                     tsSetPulse@freq:
   750                           
   751                           ; 2 bytes @ 0x6
   752  0026                     	ds	2
   753  0028                     ??_tsSetPulse:
   754                           
   755                           ; 1 bytes @ 0x8
   756  0028                     	ds	2
   757  002A                     ??_Servocontrol:
   758                           
   759                           ; 1 bytes @ 0xA
   760  002A                     	ds	3
   761  002D                     ??_main:
   762                           
   763                           ; 1 bytes @ 0xD
   764  002D                     	ds	2
   765                           
   766                           	psect	maintext
   767  05AC                     __pmaintext:	
   768 ;;
   769 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   770 ;;
   771 ;; *************** function _main *****************
   772 ;; Defined at:
   773 ;;		line 40 in file "newmain.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;		None
   776 ;; Auto vars:     Size  Location     Type
   777 ;;		None
   778 ;; Return value:  Size  Location     Type
   779 ;;                  1    wreg      void 
   780 ;; Registers used:
   781 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   782 ;; Tracked objects:
   783 ;;		On entry : B00/0
   784 ;;		On exit  : 0/0
   785 ;;		Unchanged: 0/0
   786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   787 ;;      Params:         0       0       0       0       0
   788 ;;      Locals:         0       0       0       0       0
   789 ;;      Temps:          0       2       0       0       0
   790 ;;      Totals:         0       2       0       0       0
   791 ;;Total ram usage:        2 bytes
   792 ;; Hardware stack levels required when called:    4
   793 ;; This function calls:
   794 ;;		_ADC_Read
   795 ;;		_Lcd_Init
   796 ;;		_Servocontrol
   797 ;;		_init_ADC
   798 ;;		_init_PWM
   799 ;;		_setPWM_DutyCycle
   800 ;; This function is called by:
   801 ;;		Startup code after reset
   802 ;; This function uses a non-reentrant model
   803 ;;
   804                           
   805                           
   806                           ;psect for function _main
   807  05AC                     _main:
   808  05AC                     l1206:	
   809                           ;incstack = 0
   810                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   811                           
   812                           
   813                           ;newmain.c: 42: TRISD = 0x00;
   814  05AC  1683               	bsf	3,5	;RP0=1, select bank1
   815  05AD  1303               	bcf	3,6	;RP1=0, select bank1
   816  05AE  0188               	clrf	8	;volatile
   817                           
   818                           ;newmain.c: 43: TRISB = 0x00;
   819  05AF  0186               	clrf	6	;volatile
   820  05B0                     l1208:
   821                           
   822                           ;newmain.c: 44: TRISC = 0xF9;
   823  05B0  30F9               	movlw	249
   824  05B1  0087               	movwf	7	;volatile
   825  05B2                     l1210:
   826                           
   827                           ;newmain.c: 45: Lcd_Init();
   828  05B2  120A  118A  26BC  120A  118A  	fcall	_Lcd_Init
   829  05B7                     l1212:
   830                           
   831                           ;newmain.c: 46: init_ADC();
   832  05B7  120A  118A  249A  120A  118A  	fcall	_init_ADC
   833  05BC                     l1214:
   834                           
   835                           ;newmain.c: 47: init_PWM();
   836  05BC  120A  118A  2521  120A  118A  	fcall	_init_PWM
   837  05C1                     l1216:
   838                           
   839                           ;newmain.c: 49:     setPWM_DutyCycle(-ADC_Read(0));
   840  05C1  3000               	movlw	0
   841  05C2  120A  118A  261B  120A  118A  	fcall	_ADC_Read
   842  05C7  0970               	comf	?_ADC_Read,w
   843  05C8  1283               	bcf	3,5	;RP0=0, select bank0
   844  05C9  1303               	bcf	3,6	;RP1=0, select bank0
   845  05CA  00AD               	movwf	??_main
   846  05CB  0971               	comf	?_ADC_Read+1,w
   847  05CC  00AE               	movwf	??_main+1
   848  05CD  0AAD               	incf	??_main,f
   849  05CE  1903               	skipnz
   850  05CF  0AAE               	incf	??_main+1,f
   851  05D0  082D               	movf	??_main,w
   852  05D1  00F6               	movwf	setPWM_DutyCycle@DC
   853  05D2  082E               	movf	??_main+1,w
   854  05D3  00F7               	movwf	setPWM_DutyCycle@DC+1
   855  05D4  120A  118A  24A8  120A  118A  	fcall	_setPWM_DutyCycle
   856  05D9                     l1218:
   857                           
   858                           ;newmain.c: 50:     Servocontrol();
   859  05D9  120A  118A  2781  120A  118A  	fcall	_Servocontrol
   860  05DE  2DC1               	goto	l1216
   861  05DF  120A  118A  2800   	ljmp	start
   862  05E2                     __end_of_main:
   863                           
   864                           	psect	text1
   865  04A8                     __ptext1:	
   866 ;; *************** function _setPWM_DutyCycle *****************
   867 ;; Defined at:
   868 ;;		line 27 in file "pwm.c"
   869 ;; Parameters:    Size  Location     Type
   870 ;;  DC              2    6[COMMON] unsigned int 
   871 ;; Auto vars:     Size  Location     Type
   872 ;;		None
   873 ;; Return value:  Size  Location     Type
   874 ;;                  1    wreg      void 
   875 ;; Registers used:
   876 ;;		wreg, status,2, status,0
   877 ;; Tracked objects:
   878 ;;		On entry : 0/0
   879 ;;		On exit  : 0/0
   880 ;;		Unchanged: 0/0
   881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   882 ;;      Params:         2       0       0       0       0
   883 ;;      Locals:         0       0       0       0       0
   884 ;;      Temps:          2       0       0       0       0
   885 ;;      Totals:         4       0       0       0       0
   886 ;;Total ram usage:        4 bytes
   887 ;; Hardware stack levels used:    1
   888 ;; This function calls:
   889 ;;		Nothing
   890 ;; This function is called by:
   891 ;;		_main
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895                           
   896                           ;psect for function _setPWM_DutyCycle
   897  04A8                     _setPWM_DutyCycle:
   898  04A8                     l1202:	
   899                           ;incstack = 0
   900                           ; Regs used in _setPWM_DutyCycle: [wreg+status,2+status,0]
   901                           
   902                           
   903                           ;pwm.c: 31:     CCP1Y = DC & (1<<0);
   904  04A8  1876               	btfsc	setPWM_DutyCycle@DC,0
   905  04A9  2CAB               	goto	u661
   906  04AA  2CAF               	goto	u660
   907  04AB                     u661:
   908  04AB  1283               	bcf	3,5	;RP0=0, select bank0
   909  04AC  1303               	bcf	3,6	;RP1=0, select bank0
   910  04AD  1617               	bsf	23,4	;volatile
   911  04AE  2CB2               	goto	u674
   912  04AF                     u660:
   913  04AF  1283               	bcf	3,5	;RP0=0, select bank0
   914  04B0  1303               	bcf	3,6	;RP1=0, select bank0
   915  04B1  1217               	bcf	23,4	;volatile
   916  04B2                     u674:
   917                           
   918                           ;pwm.c: 32:     CCP1X = DC & (1<<1);
   919  04B2  1297               	bcf	23,5	;volatile
   920  04B3                     l1204:
   921                           
   922                           ;pwm.c: 34:     CCPR1L = DC >> 2;
   923  04B3  0877               	movf	setPWM_DutyCycle@DC+1,w
   924  04B4  00F9               	movwf	??_setPWM_DutyCycle+1
   925  04B5  0876               	movf	setPWM_DutyCycle@DC,w
   926  04B6  00F8               	movwf	??_setPWM_DutyCycle
   927  04B7  1003               	clrc
   928  04B8  0CF9               	rrf	??_setPWM_DutyCycle+1,f
   929  04B9  0CF8               	rrf	??_setPWM_DutyCycle,f
   930  04BA  1003               	clrc
   931  04BB  0CF9               	rrf	??_setPWM_DutyCycle+1,f
   932  04BC  0CF8               	rrf	??_setPWM_DutyCycle,f
   933  04BD  0878               	movf	??_setPWM_DutyCycle,w
   934  04BE  0095               	movwf	21	;volatile
   935  04BF                     l112:
   936  04BF  0008               	return
   937  04C0                     __end_of_setPWM_DutyCycle:
   938                           
   939                           	psect	text2
   940  0521                     __ptext2:	
   941 ;; *************** function _init_PWM *****************
   942 ;; Defined at:
   943 ;;		line 9 in file "pwm.c"
   944 ;; Parameters:    Size  Location     Type
   945 ;;		None
   946 ;; Auto vars:     Size  Location     Type
   947 ;;		None
   948 ;; Return value:  Size  Location     Type
   949 ;;                  1    wreg      void 
   950 ;; Registers used:
   951 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   952 ;; Tracked objects:
   953 ;;		On entry : 0/0
   954 ;;		On exit  : 0/0
   955 ;;		Unchanged: 0/0
   956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   957 ;;      Params:         0       0       0       0       0
   958 ;;      Locals:         0       0       0       0       0
   959 ;;      Temps:          0       0       0       0       0
   960 ;;      Totals:         0       0       0       0       0
   961 ;;Total ram usage:        0 bytes
   962 ;; Hardware stack levels used:    1
   963 ;; This function calls:
   964 ;;		Nothing
   965 ;; This function is called by:
   966 ;;		_main
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           
   971                           ;psect for function _init_PWM
   972  0521                     _init_PWM:
   973  0521                     l982:	
   974                           ;incstack = 0
   975                           ; Regs used in _init_PWM: [wreg-fsr0h+status,2+status,0]
   976                           
   977                           
   978                           ;pwm.c: 11:     CCP1M2 = 1;
   979  0521  1283               	bcf	3,5	;RP0=0, select bank0
   980  0522  1303               	bcf	3,6	;RP1=0, select bank0
   981  0523  1517               	bsf	23,2	;volatile
   982                           
   983                           ;pwm.c: 12:     CCP1M3 = 1;
   984  0524  1597               	bsf	23,3	;volatile
   985                           
   986                           ;pwm.c: 14:     TRISC2 = 0;
   987  0525  1683               	bsf	3,5	;RP0=1, select bank1
   988  0526  1303               	bcf	3,6	;RP1=0, select bank1
   989  0527  1107               	bcf	7,2	;volatile
   990                           
   991                           ;pwm.c: 16:     switch(4){
   992  0528  2D37               	goto	l984
   993  0529                     l105:	
   994                           ;pwm.c: 17:         case 1: {T2CKPS0 = 0; T2CKPS1 = 0; break;}
   995                           
   996  0529  1283               	bcf	3,5	;RP0=0, select bank0
   997  052A  1303               	bcf	3,6	;RP1=0, select bank0
   998  052B  1012               	bcf	18,0	;volatile
   999  052C  1092               	bcf	18,1	;volatile
  1000  052D  2D47               	goto	l106
  1001  052E                     l107:	
  1002                           ;pwm.c: 18:         case 4: {T2CKPS0 = 1; T2CKPS1 = 0; break;}
  1003                           
  1004  052E  1283               	bcf	3,5	;RP0=0, select bank0
  1005  052F  1303               	bcf	3,6	;RP1=0, select bank0
  1006  0530  1412               	bsf	18,0	;volatile
  1007  0531  1092               	bcf	18,1	;volatile
  1008  0532  2D47               	goto	l106
  1009  0533                     l108:	
  1010                           ;pwm.c: 19:         case 16: T2CKPS1 = 0;
  1011                           
  1012  0533  1283               	bcf	3,5	;RP0=0, select bank0
  1013  0534  1303               	bcf	3,6	;RP1=0, select bank0
  1014  0535  1092               	bcf	18,1	;volatile
  1015                           
  1016                           ;pwm.c: 20:     }
  1017  0536  2D47               	goto	l106
  1018  0537                     l984:
  1019                           
  1020                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1021                           ; Switch size 1, requested type "simple"
  1022                           ; Number of cases is 1, Range of values is 0 to 0
  1023                           ; switch strategies available:
  1024                           ; Name         Instructions Cycles
  1025                           ; simple_byte            4     3 (average)
  1026                           ; direct_byte           11     8 (fixed)
  1027                           ; jumptable            260     6 (fixed)
  1028                           ;	Chosen strategy is simple_byte
  1029  0537  3000               	movlw	0
  1030  0538  3A00               	xorlw	0	; case 0
  1031  0539  1903               	skipnz
  1032  053A  2D3C               	goto	l1246
  1033  053B  2D47               	goto	l106
  1034  053C                     l1246:
  1035                           
  1036                           ; Switch size 1, requested type "simple"
  1037                           ; Number of cases is 3, Range of values is 1 to 16
  1038                           ; switch strategies available:
  1039                           ; Name         Instructions Cycles
  1040                           ; simple_byte           10     6 (average)
  1041                           ; direct_byte           59    11 (fixed)
  1042                           ; jumptable            263     9 (fixed)
  1043                           ;	Chosen strategy is simple_byte
  1044  053C  3004               	movlw	4
  1045  053D  3A01               	xorlw	1	; case 1
  1046  053E  1903               	skipnz
  1047  053F  2D29               	goto	l105
  1048  0540  3A05               	xorlw	5	; case 4
  1049  0541  1903               	skipnz
  1050  0542  2D2E               	goto	l107
  1051  0543  3A14               	xorlw	20	; case 16
  1052  0544  1903               	skipnz
  1053  0545  2D33               	goto	l108
  1054  0546  2D47               	goto	l106
  1055  0547                     l106:
  1056                           
  1057                           ;pwm.c: 21:     TMR2ON = 1;
  1058  0547  1283               	bcf	3,5	;RP0=0, select bank0
  1059  0548  1512               	bsf	18,2	;volatile
  1060  0549                     l986:
  1061                           
  1062                           ;pwm.c: 23:     PR2 = ((float)(20000000/5000))/(4*4)-1;
  1063  0549  30F9               	movlw	249
  1064  054A  1683               	bsf	3,5	;RP0=1, select bank1
  1065  054B  1303               	bcf	3,6	;RP1=0, select bank1
  1066  054C  0092               	movwf	18	;volatile
  1067  054D                     l109:
  1068  054D  0008               	return
  1069  054E                     __end_of_init_PWM:
  1070                           
  1071                           	psect	text3
  1072  049A                     __ptext3:	
  1073 ;; *************** function _init_ADC *****************
  1074 ;; Defined at:
  1075 ;;		line 6 in file "adc.c"
  1076 ;; Parameters:    Size  Location     Type
  1077 ;;		None
  1078 ;; Auto vars:     Size  Location     Type
  1079 ;;		None
  1080 ;; Return value:  Size  Location     Type
  1081 ;;                  1    wreg      void 
  1082 ;; Registers used:
  1083 ;;		None
  1084 ;; Tracked objects:
  1085 ;;		On entry : 0/0
  1086 ;;		On exit  : 0/0
  1087 ;;		Unchanged: 0/0
  1088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1089 ;;      Params:         0       0       0       0       0
  1090 ;;      Locals:         0       0       0       0       0
  1091 ;;      Temps:          0       0       0       0       0
  1092 ;;      Totals:         0       0       0       0       0
  1093 ;;Total ram usage:        0 bytes
  1094 ;; Hardware stack levels used:    1
  1095 ;; This function calls:
  1096 ;;		Nothing
  1097 ;; This function is called by:
  1098 ;;		_main
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102                           
  1103                           ;psect for function _init_ADC
  1104  049A                     _init_ADC:
  1105  049A                     l980:	
  1106                           ;incstack = 0
  1107                           ; Regs used in _init_ADC: []
  1108                           
  1109                           
  1110                           ;adc.c: 10:     ADCS0 = 1;
  1111  049A  1283               	bcf	3,5	;RP0=0, select bank0
  1112  049B  1303               	bcf	3,6	;RP1=0, select bank0
  1113  049C  171F               	bsf	31,6	;volatile
  1114                           
  1115                           ;adc.c: 11:     ADCS1 = 0;
  1116  049D  139F               	bcf	31,7	;volatile
  1117                           
  1118                           ;adc.c: 13:     ADON = 1;
  1119  049E  141F               	bsf	31,0	;volatile
  1120                           
  1121                           ;adc.c: 17:     ADFM = 1;
  1122  049F  1683               	bsf	3,5	;RP0=1, select bank1
  1123  04A0  1303               	bcf	3,6	;RP1=0, select bank1
  1124  04A1  179F               	bsf	31,7	;volatile
  1125                           
  1126                           ;adc.c: 19:     ADCS2 = 0;
  1127  04A2  131F               	bcf	31,6	;volatile
  1128                           
  1129                           ;adc.c: 21:     PCFG0 = 0;
  1130  04A3  101F               	bcf	31,0	;volatile
  1131                           
  1132                           ;adc.c: 22:     PCFG1 = 0;
  1133  04A4  109F               	bcf	31,1	;volatile
  1134                           
  1135                           ;adc.c: 23:     PCFG2 = 0;
  1136  04A5  111F               	bcf	31,2	;volatile
  1137                           
  1138                           ;adc.c: 24:     PCFG3 = 0;
  1139  04A6  119F               	bcf	31,3	;volatile
  1140  04A7                     l74:
  1141  04A7  0008               	return
  1142  04A8                     __end_of_init_ADC:
  1143                           
  1144                           	psect	text4
  1145  0781                     __ptext4:	
  1146 ;; *************** function _Servocontrol *****************
  1147 ;; Defined at:
  1148 ;;		line 22 in file "newmain.c"
  1149 ;; Parameters:    Size  Location     Type
  1150 ;;		None
  1151 ;; Auto vars:     Size  Location     Type
  1152 ;;		None
  1153 ;; Return value:  Size  Location     Type
  1154 ;;                  1    wreg      void 
  1155 ;; Registers used:
  1156 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1157 ;; Tracked objects:
  1158 ;;		On entry : 0/0
  1159 ;;		On exit  : 0/0
  1160 ;;		Unchanged: 0/0
  1161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1162 ;;      Params:         0       0       0       0       0
  1163 ;;      Locals:         0       0       0       0       0
  1164 ;;      Temps:          0       3       0       0       0
  1165 ;;      Totals:         0       3       0       0       0
  1166 ;;Total ram usage:        3 bytes
  1167 ;; Hardware stack levels used:    1
  1168 ;; Hardware stack levels required when called:    3
  1169 ;; This function calls:
  1170 ;;		_ADC_Read
  1171 ;;		_Lcd_Clear
  1172 ;;		_Lcd_Set_Cursor
  1173 ;;		_Lcd_Write_String
  1174 ;;		_tsSetPulse
  1175 ;; This function is called by:
  1176 ;;		_main
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180                           
  1181                           ;psect for function _Servocontrol
  1182  0781                     _Servocontrol:
  1183  0781                     l1180:	
  1184                           ;incstack = 0
  1185                           ; Regs used in _Servocontrol: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1186                           
  1187                           
  1188                           ;newmain.c: 23:     if(ADC_Read(0) > 500){
  1189  0781  3000               	movlw	0
  1190  0782  120A  118A  261B  120A  118A  	fcall	_ADC_Read
  1191  0787  3001               	movlw	1
  1192  0788  0271               	subwf	?_ADC_Read+1,w
  1193  0789  30F5               	movlw	245
  1194  078A  1903               	skipnz
  1195  078B  0270               	subwf	?_ADC_Read,w
  1196  078C  1C03               	skipc
  1197  078D  2F8F               	goto	u651
  1198  078E  2F90               	goto	u650
  1199  078F                     u651:
  1200  078F  2FC6               	goto	l1192
  1201  0790                     u650:
  1202  0790                     l1182:
  1203                           
  1204                           ;newmain.c: 24:         tsSetPulse(300, 19000, 60);
  1205  0790  302C               	movlw	44
  1206  0791  1283               	bcf	3,5	;RP0=0, select bank0
  1207  0792  1303               	bcf	3,6	;RP1=0, select bank0
  1208  0793  00A2               	movwf	tsSetPulse@p1
  1209  0794  3001               	movlw	1
  1210  0795  00A3               	movwf	tsSetPulse@p1+1
  1211  0796  3038               	movlw	56
  1212  0797  00A4               	movwf	tsSetPulse@p2
  1213  0798  304A               	movlw	74
  1214  0799  00A5               	movwf	tsSetPulse@p2+1
  1215  079A  303C               	movlw	60
  1216  079B  00A6               	movwf	tsSetPulse@freq
  1217  079C  3000               	movlw	0
  1218  079D  00A7               	movwf	tsSetPulse@freq+1
  1219  079E  120A  118A  257C  120A  118A  	fcall	_tsSetPulse
  1220  07A3                     l1184:
  1221                           
  1222                           ;newmain.c: 25:         _delay((unsigned long)((1000)*(20000000/4000.0)));
  1223  07A3  301A               	movlw	26
  1224  07A4  1283               	bcf	3,5	;RP0=0, select bank0
  1225  07A5  1303               	bcf	3,6	;RP1=0, select bank0
  1226  07A6  00AC               	movwf	??_Servocontrol+2
  1227  07A7  305E               	movlw	94
  1228  07A8  00AB               	movwf	??_Servocontrol+1
  1229  07A9  306D               	movlw	109
  1230  07AA  00AA               	movwf	??_Servocontrol
  1231  07AB                     u687:
  1232  07AB  0BAA               	decfsz	??_Servocontrol,f
  1233  07AC  2FAB               	goto	u687
  1234  07AD  0BAB               	decfsz	??_Servocontrol+1,f
  1235  07AE  2FAB               	goto	u687
  1236  07AF  0BAC               	decfsz	??_Servocontrol+2,f
  1237  07B0  2FAB               	goto	u687
  1238  07B1  2FB2               	nop2
  1239  07B2                     l1186:
  1240                           
  1241                           ;newmain.c: 26:         Lcd_Clear();
  1242  07B2  120A  118A  248D  120A  118A  	fcall	_Lcd_Clear
  1243  07B7                     l1188:
  1244                           
  1245                           ;newmain.c: 27:         Lcd_Set_Cursor(1,1);
  1246  07B7  01F4               	clrf	Lcd_Set_Cursor@b
  1247  07B8  0AF4               	incf	Lcd_Set_Cursor@b,f
  1248  07B9  3001               	movlw	1
  1249  07BA  120A  118A  266A  120A  118A  	fcall	_Lcd_Set_Cursor
  1250  07BF                     l1190:
  1251                           
  1252                           ;newmain.c: 28:         Lcd_Write_String("LIGHT--");
  1253  07BF  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1254  07C0  120A  118A  24FC  120A  118A  	fcall	_Lcd_Write_String
  1255                           
  1256                           ;newmain.c: 30:     }
  1257  07C5  2FFB               	goto	l31
  1258  07C6                     l1192:
  1259                           
  1260                           ;newmain.c: 32:         tsSetPulse(2200, 19000, 60);
  1261  07C6  3098               	movlw	152
  1262  07C7  1283               	bcf	3,5	;RP0=0, select bank0
  1263  07C8  1303               	bcf	3,6	;RP1=0, select bank0
  1264  07C9  00A2               	movwf	tsSetPulse@p1
  1265  07CA  3008               	movlw	8
  1266  07CB  00A3               	movwf	tsSetPulse@p1+1
  1267  07CC  3038               	movlw	56
  1268  07CD  00A4               	movwf	tsSetPulse@p2
  1269  07CE  304A               	movlw	74
  1270  07CF  00A5               	movwf	tsSetPulse@p2+1
  1271  07D0  303C               	movlw	60
  1272  07D1  00A6               	movwf	tsSetPulse@freq
  1273  07D2  3000               	movlw	0
  1274  07D3  00A7               	movwf	tsSetPulse@freq+1
  1275  07D4  120A  118A  257C  120A  118A  	fcall	_tsSetPulse
  1276  07D9                     l1194:
  1277                           
  1278                           ;newmain.c: 33:         _delay((unsigned long)((1000)*(20000000/4000.0)));
  1279  07D9  301A               	movlw	26
  1280  07DA  1283               	bcf	3,5	;RP0=0, select bank0
  1281  07DB  1303               	bcf	3,6	;RP1=0, select bank0
  1282  07DC  00AC               	movwf	??_Servocontrol+2
  1283  07DD  305E               	movlw	94
  1284  07DE  00AB               	movwf	??_Servocontrol+1
  1285  07DF  306D               	movlw	109
  1286  07E0  00AA               	movwf	??_Servocontrol
  1287  07E1                     u697:
  1288  07E1  0BAA               	decfsz	??_Servocontrol,f
  1289  07E2  2FE1               	goto	u697
  1290  07E3  0BAB               	decfsz	??_Servocontrol+1,f
  1291  07E4  2FE1               	goto	u697
  1292  07E5  0BAC               	decfsz	??_Servocontrol+2,f
  1293  07E6  2FE1               	goto	u697
  1294  07E7  2FE8               	nop2
  1295  07E8                     l1196:
  1296                           
  1297                           ;newmain.c: 34:         Lcd_Clear();
  1298  07E8  120A  118A  248D  120A  118A  	fcall	_Lcd_Clear
  1299  07ED                     l1198:
  1300                           
  1301                           ;newmain.c: 35:         Lcd_Set_Cursor(1,1);
  1302  07ED  01F4               	clrf	Lcd_Set_Cursor@b
  1303  07EE  0AF4               	incf	Lcd_Set_Cursor@b,f
  1304  07EF  3001               	movlw	1
  1305  07F0  120A  118A  266A  120A  118A  	fcall	_Lcd_Set_Cursor
  1306  07F5                     l1200:
  1307                           
  1308                           ;newmain.c: 36:         Lcd_Write_String("DARK--");
  1309  07F5  3009               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1310  07F6  120A  118A  24FC  120A  118A  	fcall	_Lcd_Write_String
  1311  07FB                     l31:
  1312  07FB  0008               	return
  1313  07FC                     __end_of_Servocontrol:
  1314                           
  1315                           	psect	text5
  1316  057C                     __ptext5:	
  1317 ;; *************** function _tsSetPulse *****************
  1318 ;; Defined at:
  1319 ;;		line 15 in file "servo.c"
  1320 ;; Parameters:    Size  Location     Type
  1321 ;;  p1              2    2[BANK0 ] int 
  1322 ;;  p2              2    4[BANK0 ] int 
  1323 ;;  freq            2    6[BANK0 ] int 
  1324 ;; Auto vars:     Size  Location     Type
  1325 ;;		None
  1326 ;; Return value:  Size  Location     Type
  1327 ;;                  1    wreg      void 
  1328 ;; Registers used:
  1329 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1330 ;; Tracked objects:
  1331 ;;		On entry : 0/0
  1332 ;;		On exit  : 0/0
  1333 ;;		Unchanged: 0/0
  1334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1335 ;;      Params:         0       6       0       0       0
  1336 ;;      Locals:         0       0       0       0       0
  1337 ;;      Temps:          0       2       0       0       0
  1338 ;;      Totals:         0       8       0       0       0
  1339 ;;Total ram usage:        8 bytes
  1340 ;; Hardware stack levels used:    1
  1341 ;; Hardware stack levels required when called:    2
  1342 ;; This function calls:
  1343 ;;		_tsDelay
  1344 ;; This function is called by:
  1345 ;;		_Servocontrol
  1346 ;;		_tsSetPosPercent
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349                           
  1350                           
  1351                           ;psect for function _tsSetPulse
  1352  057C                     _tsSetPulse:
  1353  057C                     l1144:	
  1354                           ;incstack = 0
  1355                           ; Regs used in _tsSetPulse: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1356                           
  1357                           
  1358                           ;servo.c: 15: void tsSetPulse(int p1, int p2, int freq);servo.c: 16: {;servo.c: 17:  whi
      +                          le(freq-->0)
  1359  057C  2D95               	goto	l1150
  1360  057D                     l126:
  1361                           
  1362                           ;servo.c: 18:  {;servo.c: 19:   RB3 = 1;
  1363  057D  1283               	bcf	3,5	;RP0=0, select bank0
  1364  057E  1303               	bcf	3,6	;RP1=0, select bank0
  1365  057F  1586               	bsf	6,3	;volatile
  1366  0580                     l1146:
  1367                           
  1368                           ;servo.c: 20:   tsDelay(p1);
  1369  0580  0823               	movf	tsSetPulse@p1+1,w
  1370  0581  00FA               	movwf	tsDelay@d+1
  1371  0582  0822               	movf	tsSetPulse@p1,w
  1372  0583  00F9               	movwf	tsDelay@d
  1373  0584  120A  118A  254E  120A  118A  	fcall	_tsDelay
  1374  0589                     l1148:
  1375                           
  1376                           ;servo.c: 21:   RB3 = 0;
  1377  0589  1283               	bcf	3,5	;RP0=0, select bank0
  1378  058A  1303               	bcf	3,6	;RP1=0, select bank0
  1379  058B  1186               	bcf	6,3	;volatile
  1380                           
  1381                           ;servo.c: 22:   tsDelay(p2);
  1382  058C  0825               	movf	tsSetPulse@p2+1,w
  1383  058D  00FA               	movwf	tsDelay@d+1
  1384  058E  0824               	movf	tsSetPulse@p2,w
  1385  058F  00F9               	movwf	tsDelay@d
  1386  0590  120A  118A  254E  120A  118A  	fcall	_tsDelay
  1387  0595                     l1150:
  1388                           
  1389                           ;servo.c: 17:  while(freq-->0)
  1390  0595  1283               	bcf	3,5	;RP0=0, select bank0
  1391  0596  1303               	bcf	3,6	;RP1=0, select bank0
  1392  0597  0827               	movf	tsSetPulse@freq+1,w
  1393  0598  00A9               	movwf	??_tsSetPulse+1
  1394  0599  03A6               	decf	tsSetPulse@freq,f
  1395  059A  0A26               	incf	tsSetPulse@freq,w
  1396  059B  00A8               	movwf	??_tsSetPulse
  1397  059C  1903               	skipnz
  1398  059D  03A7               	decf	tsSetPulse@freq+1,f
  1399  059E  0829               	movf	??_tsSetPulse+1,w
  1400  059F  3A80               	xorlw	128
  1401  05A0  00FF               	movwf	btemp+1
  1402  05A1  3080               	movlw	128
  1403  05A2  027F               	subwf	btemp+1,w
  1404  05A3  1D03               	skipz
  1405  05A4  2DA7               	goto	u595
  1406  05A5  3001               	movlw	1
  1407  05A6  0228               	subwf	??_tsSetPulse,w
  1408  05A7                     u595:
  1409  05A7  1803               	skipnc
  1410  05A8  2DAA               	goto	u591
  1411  05A9  2DAB               	goto	u590
  1412  05AA                     u591:
  1413  05AA  2D7D               	goto	l126
  1414  05AB                     u590:
  1415  05AB                     l128:
  1416  05AB  0008               	return
  1417  05AC                     __end_of_tsSetPulse:
  1418                           
  1419                           	psect	text6
  1420  054E                     __ptext6:	
  1421 ;; *************** function _tsDelay *****************
  1422 ;; Defined at:
  1423 ;;		line 8 in file "servo.c"
  1424 ;; Parameters:    Size  Location     Type
  1425 ;;  d               2    9[COMMON] int 
  1426 ;; Auto vars:     Size  Location     Type
  1427 ;;  delay           2    0[BANK0 ] int 
  1428 ;; Return value:  Size  Location     Type
  1429 ;;                  1    wreg      void 
  1430 ;; Registers used:
  1431 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1432 ;; Tracked objects:
  1433 ;;		On entry : 0/0
  1434 ;;		On exit  : 0/0
  1435 ;;		Unchanged: 0/0
  1436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1437 ;;      Params:         2       0       0       0       0
  1438 ;;      Locals:         0       2       0       0       0
  1439 ;;      Temps:          2       0       0       0       0
  1440 ;;      Totals:         4       2       0       0       0
  1441 ;;Total ram usage:        6 bytes
  1442 ;; Hardware stack levels used:    1
  1443 ;; Hardware stack levels required when called:    1
  1444 ;; This function calls:
  1445 ;;		___awdiv
  1446 ;; This function is called by:
  1447 ;;		_tsSetPulse
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451                           
  1452                           ;psect for function _tsDelay
  1453  054E                     _tsDelay:
  1454  054E                     l1124:	
  1455                           ;incstack = 0
  1456                           ; Regs used in _tsDelay: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1457                           
  1458                           
  1459                           ;servo.c: 8: void tsDelay(int d);servo.c: 9: {;servo.c: 10:  int delay = d/5;
  1460  054E  3005               	movlw	5
  1461  054F  00F0               	movwf	___awdiv@divisor
  1462  0550  3000               	movlw	0
  1463  0551  00F1               	movwf	___awdiv@divisor+1
  1464  0552  087A               	movf	tsDelay@d+1,w
  1465  0553  00F3               	movwf	___awdiv@dividend+1
  1466  0554  0879               	movf	tsDelay@d,w
  1467  0555  00F2               	movwf	___awdiv@dividend
  1468  0556  120A  118A  271A  120A  118A  	fcall	___awdiv
  1469  055B  0871               	movf	?___awdiv+1,w
  1470  055C  1283               	bcf	3,5	;RP0=0, select bank0
  1471  055D  1303               	bcf	3,6	;RP1=0, select bank0
  1472  055E  00A1               	movwf	tsDelay@delay+1
  1473  055F  0870               	movf	?___awdiv,w
  1474  0560  00A0               	movwf	tsDelay@delay
  1475                           
  1476                           ;servo.c: 11:  while(delay-->0)
  1477  0561  2D65               	goto	l1126
  1478  0562                     l120:
  1479                           
  1480                           ;servo.c: 12:   _delay((unsigned long)((1)*(20000000/4000000.0)));
  1481  0562  2D63               	nop2	;2 cycle nop
  1482  0563  2D64               	nop2	;2 cycle nop
  1483  0564  0000               	nop
  1484  0565                     l1126:
  1485                           
  1486                           ;servo.c: 11:  while(delay-->0)
  1487  0565  1283               	bcf	3,5	;RP0=0, select bank0
  1488  0566  1303               	bcf	3,6	;RP1=0, select bank0
  1489  0567  0821               	movf	tsDelay@delay+1,w
  1490  0568  00FC               	movwf	??_tsDelay+1
  1491  0569  03A0               	decf	tsDelay@delay,f
  1492  056A  0A20               	incf	tsDelay@delay,w
  1493  056B  00FB               	movwf	??_tsDelay
  1494  056C  1903               	skipnz
  1495  056D  03A1               	decf	tsDelay@delay+1,f
  1496  056E  087C               	movf	??_tsDelay+1,w
  1497  056F  3A80               	xorlw	128
  1498  0570  00FF               	movwf	btemp+1
  1499  0571  3080               	movlw	128
  1500  0572  027F               	subwf	btemp+1,w
  1501  0573  1D03               	skipz
  1502  0574  2D77               	goto	u485
  1503  0575  3001               	movlw	1
  1504  0576  027B               	subwf	??_tsDelay,w
  1505  0577                     u485:
  1506  0577  1803               	skipnc
  1507  0578  2D7A               	goto	u481
  1508  0579  2D7B               	goto	u480
  1509  057A                     u481:
  1510  057A  2D62               	goto	l120
  1511  057B                     u480:
  1512  057B                     l122:
  1513  057B  0008               	return
  1514  057C                     __end_of_tsDelay:
  1515                           
  1516                           	psect	text7
  1517  071A                     __ptext7:	
  1518 ;; *************** function ___awdiv *****************
  1519 ;; Defined at:
  1520 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\awdiv.c"
  1521 ;; Parameters:    Size  Location     Type
  1522 ;;  divisor         2    0[COMMON] int 
  1523 ;;  dividend        2    2[COMMON] int 
  1524 ;; Auto vars:     Size  Location     Type
  1525 ;;  quotient        2    7[COMMON] int 
  1526 ;;  sign            1    6[COMMON] unsigned char 
  1527 ;;  counter         1    5[COMMON] unsigned char 
  1528 ;; Return value:  Size  Location     Type
  1529 ;;                  2    0[COMMON] int 
  1530 ;; Registers used:
  1531 ;;		wreg, status,2, status,0
  1532 ;; Tracked objects:
  1533 ;;		On entry : 0/0
  1534 ;;		On exit  : 0/0
  1535 ;;		Unchanged: 0/0
  1536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1537 ;;      Params:         4       0       0       0       0
  1538 ;;      Locals:         4       0       0       0       0
  1539 ;;      Temps:          1       0       0       0       0
  1540 ;;      Totals:         9       0       0       0       0
  1541 ;;Total ram usage:        9 bytes
  1542 ;; Hardware stack levels used:    1
  1543 ;; This function calls:
  1544 ;;		Nothing
  1545 ;; This function is called by:
  1546 ;;		_tsDelay
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550                           
  1551                           ;psect for function ___awdiv
  1552  071A                     ___awdiv:
  1553  071A                     l1080:	
  1554                           ;incstack = 0
  1555                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1556                           
  1557  071A  01F6               	clrf	___awdiv@sign
  1558  071B                     l1082:
  1559  071B  1FF1               	btfss	___awdiv@divisor+1,7
  1560  071C  2F1E               	goto	u381
  1561  071D  2F1F               	goto	u380
  1562  071E                     u381:
  1563  071E  2F26               	goto	l1088
  1564  071F                     u380:
  1565  071F                     l1084:
  1566  071F  09F0               	comf	___awdiv@divisor,f
  1567  0720  09F1               	comf	___awdiv@divisor+1,f
  1568  0721  0AF0               	incf	___awdiv@divisor,f
  1569  0722  1903               	skipnz
  1570  0723  0AF1               	incf	___awdiv@divisor+1,f
  1571  0724                     l1086:
  1572  0724  01F6               	clrf	___awdiv@sign
  1573  0725  0AF6               	incf	___awdiv@sign,f
  1574  0726                     l1088:
  1575  0726  1FF3               	btfss	___awdiv@dividend+1,7
  1576  0727  2F29               	goto	u391
  1577  0728  2F2A               	goto	u390
  1578  0729                     u391:
  1579  0729  2F33               	goto	l1094
  1580  072A                     u390:
  1581  072A                     l1090:
  1582  072A  09F2               	comf	___awdiv@dividend,f
  1583  072B  09F3               	comf	___awdiv@dividend+1,f
  1584  072C  0AF2               	incf	___awdiv@dividend,f
  1585  072D  1903               	skipnz
  1586  072E  0AF3               	incf	___awdiv@dividend+1,f
  1587  072F                     l1092:
  1588  072F  3001               	movlw	1
  1589  0730  00F4               	movwf	??___awdiv
  1590  0731  0874               	movf	??___awdiv,w
  1591  0732  06F6               	xorwf	___awdiv@sign,f
  1592  0733                     l1094:
  1593  0733  01F7               	clrf	___awdiv@quotient
  1594  0734  01F8               	clrf	___awdiv@quotient+1
  1595  0735                     l1096:
  1596  0735  0870               	movf	___awdiv@divisor,w
  1597  0736  0471               	iorwf	___awdiv@divisor+1,w
  1598  0737  1903               	btfsc	3,2
  1599  0738  2F3A               	goto	u401
  1600  0739  2F3B               	goto	u400
  1601  073A                     u401:
  1602  073A  2F72               	goto	l1116
  1603  073B                     u400:
  1604  073B                     l1098:
  1605  073B  01F5               	clrf	___awdiv@counter
  1606  073C  0AF5               	incf	___awdiv@counter,f
  1607  073D  2F49               	goto	l1104
  1608  073E                     l1100:
  1609  073E  3001               	movlw	1
  1610  073F                     u415:
  1611  073F  1003               	clrc
  1612  0740  0DF0               	rlf	___awdiv@divisor,f
  1613  0741  0DF1               	rlf	___awdiv@divisor+1,f
  1614  0742  3EFF               	addlw	-1
  1615  0743  1D03               	skipz
  1616  0744  2F3F               	goto	u415
  1617  0745                     l1102:
  1618  0745  3001               	movlw	1
  1619  0746  00F4               	movwf	??___awdiv
  1620  0747  0874               	movf	??___awdiv,w
  1621  0748  07F5               	addwf	___awdiv@counter,f
  1622  0749                     l1104:
  1623  0749  1FF1               	btfss	___awdiv@divisor+1,7
  1624  074A  2F4C               	goto	u421
  1625  074B  2F4D               	goto	u420
  1626  074C                     u421:
  1627  074C  2F3E               	goto	l1100
  1628  074D                     u420:
  1629  074D                     l1106:
  1630  074D  3001               	movlw	1
  1631  074E                     u435:
  1632  074E  1003               	clrc
  1633  074F  0DF7               	rlf	___awdiv@quotient,f
  1634  0750  0DF8               	rlf	___awdiv@quotient+1,f
  1635  0751  3EFF               	addlw	-1
  1636  0752  1D03               	skipz
  1637  0753  2F4E               	goto	u435
  1638  0754  0871               	movf	___awdiv@divisor+1,w
  1639  0755  0273               	subwf	___awdiv@dividend+1,w
  1640  0756  1D03               	skipz
  1641  0757  2F5A               	goto	u445
  1642  0758  0870               	movf	___awdiv@divisor,w
  1643  0759  0272               	subwf	___awdiv@dividend,w
  1644  075A                     u445:
  1645  075A  1C03               	skipc
  1646  075B  2F5D               	goto	u441
  1647  075C  2F5E               	goto	u440
  1648  075D                     u441:
  1649  075D  2F65               	goto	l1112
  1650  075E                     u440:
  1651  075E                     l1108:
  1652  075E  0870               	movf	___awdiv@divisor,w
  1653  075F  02F2               	subwf	___awdiv@dividend,f
  1654  0760  0871               	movf	___awdiv@divisor+1,w
  1655  0761  1C03               	skipc
  1656  0762  03F3               	decf	___awdiv@dividend+1,f
  1657  0763  02F3               	subwf	___awdiv@dividend+1,f
  1658  0764                     l1110:
  1659  0764  1477               	bsf	___awdiv@quotient,0
  1660  0765                     l1112:
  1661  0765  3001               	movlw	1
  1662  0766                     u455:
  1663  0766  1003               	clrc
  1664  0767  0CF1               	rrf	___awdiv@divisor+1,f
  1665  0768  0CF0               	rrf	___awdiv@divisor,f
  1666  0769  3EFF               	addlw	-1
  1667  076A  1D03               	skipz
  1668  076B  2F66               	goto	u455
  1669  076C                     l1114:
  1670  076C  3001               	movlw	1
  1671  076D  02F5               	subwf	___awdiv@counter,f
  1672  076E  1D03               	btfss	3,2
  1673  076F  2F71               	goto	u461
  1674  0770  2F72               	goto	u460
  1675  0771                     u461:
  1676  0771  2F4D               	goto	l1106
  1677  0772                     u460:
  1678  0772                     l1116:
  1679  0772  0876               	movf	___awdiv@sign,w
  1680  0773  1903               	btfsc	3,2
  1681  0774  2F76               	goto	u471
  1682  0775  2F77               	goto	u470
  1683  0776                     u471:
  1684  0776  2F7C               	goto	l1120
  1685  0777                     u470:
  1686  0777                     l1118:
  1687  0777  09F7               	comf	___awdiv@quotient,f
  1688  0778  09F8               	comf	___awdiv@quotient+1,f
  1689  0779  0AF7               	incf	___awdiv@quotient,f
  1690  077A  1903               	skipnz
  1691  077B  0AF8               	incf	___awdiv@quotient+1,f
  1692  077C                     l1120:
  1693  077C  0878               	movf	___awdiv@quotient+1,w
  1694  077D  00F1               	movwf	?___awdiv+1
  1695  077E  0877               	movf	___awdiv@quotient,w
  1696  077F  00F0               	movwf	?___awdiv
  1697  0780                     l453:
  1698  0780  0008               	return
  1699  0781                     __end_of___awdiv:
  1700                           
  1701                           	psect	text8
  1702  04FC                     __ptext8:	
  1703 ;; *************** function _Lcd_Write_String *****************
  1704 ;; Defined at:
  1705 ;;		line 106 in file "lcd.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  a               1    wreg     PTR unsigned char 
  1708 ;;		 -> STR_2(7), STR_1(8), 
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;  a               1    7[COMMON] PTR unsigned char 
  1711 ;;		 -> STR_2(7), STR_1(8), 
  1712 ;;  i               2    5[COMMON] int 
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  1    wreg      void 
  1715 ;; Registers used:
  1716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1722 ;;      Params:         0       0       0       0       0
  1723 ;;      Locals:         3       0       0       0       0
  1724 ;;      Temps:          0       0       0       0       0
  1725 ;;      Totals:         3       0       0       0       0
  1726 ;;Total ram usage:        3 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; Hardware stack levels required when called:    2
  1729 ;; This function calls:
  1730 ;;		_Lcd_Write_Char
  1731 ;; This function is called by:
  1732 ;;		_Servocontrol
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           
  1737                           ;psect for function _Lcd_Write_String
  1738  04FC                     _Lcd_Write_String:
  1739                           
  1740                           ;incstack = 0
  1741                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1742                           ;Lcd_Write_String@a stored from wreg
  1743  04FC  00F7               	movwf	Lcd_Write_String@a
  1744  04FD                     l1172:
  1745                           
  1746                           ;lcd.c: 106: void Lcd_Write_String(char *a);lcd.c: 107: {;lcd.c: 108:  int i;;lcd.c: 109
      +                          :  for(i=0;a[i]!='\0';i++)
  1747  04FD  01F5               	clrf	Lcd_Write_String@i
  1748  04FE  01F6               	clrf	Lcd_Write_String@i+1
  1749  04FF  2D13               	goto	l1178
  1750  0500                     l1174:
  1751                           
  1752                           ;lcd.c: 110:     Lcd_Write_Char(a[i]);
  1753  0500  0875               	movf	Lcd_Write_String@i,w
  1754  0501  0777               	addwf	Lcd_Write_String@a,w
  1755  0502  0084               	movwf	4
  1756  0503  120A  118A  2003  120A  118A  	fcall	stringdir
  1757  0508  120A  118A  25E2  120A  118A  	fcall	_Lcd_Write_Char
  1758  050D                     l1176:
  1759  050D  3001               	movlw	1
  1760  050E  07F5               	addwf	Lcd_Write_String@i,f
  1761  050F  1803               	skipnc
  1762  0510  0AF6               	incf	Lcd_Write_String@i+1,f
  1763  0511  3000               	movlw	0
  1764  0512  07F6               	addwf	Lcd_Write_String@i+1,f
  1765  0513                     l1178:
  1766  0513  0875               	movf	Lcd_Write_String@i,w
  1767  0514  0777               	addwf	Lcd_Write_String@a,w
  1768  0515  0084               	movwf	4
  1769  0516  120A  118A  2003  120A  118A  	fcall	stringdir
  1770  051B  3A00               	xorlw	0
  1771  051C  1D03               	skipz
  1772  051D  2D1F               	goto	u641
  1773  051E  2D20               	goto	u640
  1774  051F                     u641:
  1775  051F  2D00               	goto	l1174
  1776  0520                     u640:
  1777  0520                     l185:
  1778  0520  0008               	return
  1779  0521                     __end_of_Lcd_Write_String:
  1780                           
  1781                           	psect	text9
  1782  05E2                     __ptext9:	
  1783 ;; *************** function _Lcd_Write_Char *****************
  1784 ;; Defined at:
  1785 ;;		line 90 in file "lcd.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;  a               1    wreg     unsigned char 
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;  a               1    4[COMMON] unsigned char 
  1790 ;;  y               1    3[COMMON] unsigned char 
  1791 ;;  temp            1    2[COMMON] unsigned char 
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  1    wreg      void 
  1794 ;; Registers used:
  1795 ;;		wreg, status,2, status,0, pclath, cstack
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1801 ;;      Params:         0       0       0       0       0
  1802 ;;      Locals:         3       0       0       0       0
  1803 ;;      Temps:          1       0       0       0       0
  1804 ;;      Totals:         4       0       0       0       0
  1805 ;;Total ram usage:        4 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; Hardware stack levels required when called:    1
  1808 ;; This function calls:
  1809 ;;		_Lcd_Port
  1810 ;; This function is called by:
  1811 ;;		_Lcd_Write_String
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           
  1816                           ;psect for function _Lcd_Write_Char
  1817  05E2                     _Lcd_Write_Char:
  1818                           
  1819                           ;incstack = 0
  1820                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1821                           ;Lcd_Write_Char@a stored from wreg
  1822  05E2  00F4               	movwf	Lcd_Write_Char@a
  1823  05E3                     l874:
  1824                           
  1825                           ;lcd.c: 90: void Lcd_Write_Char(char a);lcd.c: 91: {;lcd.c: 92:    char temp,y;;lcd.c: 9
      +                          3:    temp = a&0x0F;
  1826  05E3  0874               	movf	Lcd_Write_Char@a,w
  1827  05E4  390F               	andlw	15
  1828  05E5  00F1               	movwf	??_Lcd_Write_Char
  1829  05E6  0871               	movf	??_Lcd_Write_Char,w
  1830  05E7  00F2               	movwf	Lcd_Write_Char@temp
  1831                           
  1832                           ;lcd.c: 94:    y = a&0xF0;
  1833  05E8  0874               	movf	Lcd_Write_Char@a,w
  1834  05E9  39F0               	andlw	240
  1835  05EA  00F1               	movwf	??_Lcd_Write_Char
  1836  05EB  0871               	movf	??_Lcd_Write_Char,w
  1837  05EC  00F3               	movwf	Lcd_Write_Char@y
  1838  05ED                     l876:
  1839                           
  1840                           ;lcd.c: 95:    RB1 = 1;
  1841  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  1842  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  1843  05EF  1486               	bsf	6,1	;volatile
  1844  05F0                     l878:
  1845                           
  1846                           ;lcd.c: 96:    Lcd_Port(y>>4);
  1847  05F0  0873               	movf	Lcd_Write_Char@y,w
  1848  05F1  00F1               	movwf	??_Lcd_Write_Char
  1849  05F2  3004               	movlw	4
  1850  05F3                     u165:
  1851  05F3  1003               	clrc
  1852  05F4  0CF1               	rrf	??_Lcd_Write_Char,f
  1853  05F5  3EFF               	addlw	-1
  1854  05F6  1D03               	skipz
  1855  05F7  2DF3               	goto	u165
  1856  05F8  0871               	movf	??_Lcd_Write_Char,w
  1857  05F9  120A  118A  24DA  120A  118A  	fcall	_Lcd_Port
  1858  05FE                     l880:
  1859                           
  1860                           ;lcd.c: 97:    RB2 = 1;
  1861  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  1862  05FF  1303               	bcf	3,6	;RP1=0, select bank0
  1863  0600  1506               	bsf	6,2	;volatile
  1864  0601                     l882:
  1865                           
  1866                           ;lcd.c: 98:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  1867  0601  3042               	movlw	66
  1868  0602  00F1               	movwf	??_Lcd_Write_Char
  1869  0603                     u707:
  1870  0603  0BF1               	decfsz	??_Lcd_Write_Char,f
  1871  0604  2E03               	goto	u707
  1872  0605  0000               	nop
  1873  0606                     l884:
  1874                           
  1875                           ;lcd.c: 99:    RB2 = 0;
  1876  0606  1283               	bcf	3,5	;RP0=0, select bank0
  1877  0607  1303               	bcf	3,6	;RP1=0, select bank0
  1878  0608  1106               	bcf	6,2	;volatile
  1879  0609                     l886:
  1880                           
  1881                           ;lcd.c: 100:    Lcd_Port(temp);
  1882  0609  0872               	movf	Lcd_Write_Char@temp,w
  1883  060A  120A  118A  24DA  120A  118A  	fcall	_Lcd_Port
  1884  060F                     l888:
  1885                           
  1886                           ;lcd.c: 101:    RB2 = 1;
  1887  060F  1283               	bcf	3,5	;RP0=0, select bank0
  1888  0610  1303               	bcf	3,6	;RP1=0, select bank0
  1889  0611  1506               	bsf	6,2	;volatile
  1890  0612                     l890:
  1891                           
  1892                           ;lcd.c: 102:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  1893  0612  3042               	movlw	66
  1894  0613  00F1               	movwf	??_Lcd_Write_Char
  1895  0614                     u717:
  1896  0614  0BF1               	decfsz	??_Lcd_Write_Char,f
  1897  0615  2E14               	goto	u717
  1898  0616  0000               	nop
  1899  0617                     l892:
  1900                           
  1901                           ;lcd.c: 103:    RB2 = 0;
  1902  0617  1283               	bcf	3,5	;RP0=0, select bank0
  1903  0618  1303               	bcf	3,6	;RP1=0, select bank0
  1904  0619  1106               	bcf	6,2	;volatile
  1905  061A                     l179:
  1906  061A  0008               	return
  1907  061B                     __end_of_Lcd_Write_Char:
  1908                           
  1909                           	psect	text10
  1910  066A                     __ptext10:	
  1911 ;; *************** function _Lcd_Set_Cursor *****************
  1912 ;; Defined at:
  1913 ;;		line 50 in file "lcd.c"
  1914 ;; Parameters:    Size  Location     Type
  1915 ;;  a               1    wreg     unsigned char 
  1916 ;;  b               1    4[COMMON] unsigned char 
  1917 ;; Auto vars:     Size  Location     Type
  1918 ;;  a               1    7[COMMON] unsigned char 
  1919 ;;  temp            1   10[COMMON] unsigned char 
  1920 ;;  y               1    9[COMMON] unsigned char 
  1921 ;;  z               1    8[COMMON] unsigned char 
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  1    wreg      void 
  1924 ;; Registers used:
  1925 ;;		wreg, status,2, status,0, pclath, cstack
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1931 ;;      Params:         1       0       0       0       0
  1932 ;;      Locals:         4       0       0       0       0
  1933 ;;      Temps:          2       0       0       0       0
  1934 ;;      Totals:         7       0       0       0       0
  1935 ;;Total ram usage:        7 bytes
  1936 ;; Hardware stack levels used:    1
  1937 ;; Hardware stack levels required when called:    2
  1938 ;; This function calls:
  1939 ;;		_Lcd_Cmd
  1940 ;; This function is called by:
  1941 ;;		_Servocontrol
  1942 ;; This function uses a non-reentrant model
  1943 ;;
  1944                           
  1945                           
  1946                           ;psect for function _Lcd_Set_Cursor
  1947  066A                     _Lcd_Set_Cursor:
  1948                           
  1949                           ;incstack = 0
  1950                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1951                           ;Lcd_Set_Cursor@a stored from wreg
  1952  066A  00F7               	movwf	Lcd_Set_Cursor@a
  1953  066B                     l1152:
  1954                           
  1955                           ;lcd.c: 50: void Lcd_Set_Cursor(char a, char b);lcd.c: 51: {;lcd.c: 52:  char temp,z,y;;
      +                          lcd.c: 53:  if(a == 1)
  1956  066B  0377               	decf	Lcd_Set_Cursor@a,w
  1957  066C  1D03               	btfss	3,2
  1958  066D  2E6F               	goto	u601
  1959  066E  2E70               	goto	u600
  1960  066F                     u601:
  1961  066F  2E93               	goto	l1162
  1962  0670                     u600:
  1963  0670                     l1154:
  1964                           
  1965                           ;lcd.c: 54:  {;lcd.c: 55:    temp = 0x80 + b - 1;
  1966  0670  0874               	movf	Lcd_Set_Cursor@b,w
  1967  0671  3E7F               	addlw	127
  1968  0672  00F5               	movwf	??_Lcd_Set_Cursor
  1969  0673  0875               	movf	??_Lcd_Set_Cursor,w
  1970  0674  00FA               	movwf	Lcd_Set_Cursor@temp
  1971                           
  1972                           ;lcd.c: 56:   z = temp>>4;
  1973  0675  087A               	movf	Lcd_Set_Cursor@temp,w
  1974  0676  00F5               	movwf	??_Lcd_Set_Cursor
  1975  0677  3004               	movlw	4
  1976  0678                     u615:
  1977  0678  1003               	clrc
  1978  0679  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1979  067A  3EFF               	addlw	-1
  1980  067B  1D03               	skipz
  1981  067C  2E78               	goto	u615
  1982  067D  0875               	movf	??_Lcd_Set_Cursor,w
  1983  067E  00F6               	movwf	??_Lcd_Set_Cursor+1
  1984  067F  0876               	movf	??_Lcd_Set_Cursor+1,w
  1985  0680  00F8               	movwf	Lcd_Set_Cursor@z
  1986  0681                     l1156:
  1987                           
  1988                           ;lcd.c: 57:   y = temp & 0x0F;
  1989  0681  087A               	movf	Lcd_Set_Cursor@temp,w
  1990  0682  390F               	andlw	15
  1991  0683  00F5               	movwf	??_Lcd_Set_Cursor
  1992  0684  0875               	movf	??_Lcd_Set_Cursor,w
  1993  0685  00F9               	movwf	Lcd_Set_Cursor@y
  1994  0686                     l1158:
  1995                           
  1996                           ;lcd.c: 58:   Lcd_Cmd(z);
  1997  0686  0878               	movf	Lcd_Set_Cursor@z,w
  1998  0687  120A  118A  24C0  120A  118A  	fcall	_Lcd_Cmd
  1999  068C                     l1160:
  2000                           
  2001                           ;lcd.c: 59:   Lcd_Cmd(y);
  2002  068C  0879               	movf	Lcd_Set_Cursor@y,w
  2003  068D  120A  118A  24C0  120A  118A  	fcall	_Lcd_Cmd
  2004                           
  2005                           ;lcd.c: 60:  }
  2006  0692  2EBB               	goto	l173
  2007  0693                     l1162:
  2008  0693  3002               	movlw	2
  2009  0694  0677               	xorwf	Lcd_Set_Cursor@a,w
  2010  0695  1D03               	btfss	3,2
  2011  0696  2E98               	goto	u621
  2012  0697  2E99               	goto	u620
  2013  0698                     u621:
  2014  0698  2EBB               	goto	l173
  2015  0699                     u620:
  2016  0699                     l1164:
  2017                           
  2018                           ;lcd.c: 62:  {;lcd.c: 63:   temp = 0xC0 + b - 1;
  2019  0699  0874               	movf	Lcd_Set_Cursor@b,w
  2020  069A  3EBF               	addlw	191
  2021  069B  00F5               	movwf	??_Lcd_Set_Cursor
  2022  069C  0875               	movf	??_Lcd_Set_Cursor,w
  2023  069D  00FA               	movwf	Lcd_Set_Cursor@temp
  2024                           
  2025                           ;lcd.c: 64:   z = temp>>4;
  2026  069E  087A               	movf	Lcd_Set_Cursor@temp,w
  2027  069F  00F5               	movwf	??_Lcd_Set_Cursor
  2028  06A0  3004               	movlw	4
  2029  06A1                     u635:
  2030  06A1  1003               	clrc
  2031  06A2  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2032  06A3  3EFF               	addlw	-1
  2033  06A4  1D03               	skipz
  2034  06A5  2EA1               	goto	u635
  2035  06A6  0875               	movf	??_Lcd_Set_Cursor,w
  2036  06A7  00F6               	movwf	??_Lcd_Set_Cursor+1
  2037  06A8  0876               	movf	??_Lcd_Set_Cursor+1,w
  2038  06A9  00F8               	movwf	Lcd_Set_Cursor@z
  2039  06AA                     l1166:
  2040                           
  2041                           ;lcd.c: 65:   y = temp & 0x0F;
  2042  06AA  087A               	movf	Lcd_Set_Cursor@temp,w
  2043  06AB  390F               	andlw	15
  2044  06AC  00F5               	movwf	??_Lcd_Set_Cursor
  2045  06AD  0875               	movf	??_Lcd_Set_Cursor,w
  2046  06AE  00F9               	movwf	Lcd_Set_Cursor@y
  2047  06AF                     l1168:
  2048                           
  2049                           ;lcd.c: 66:   Lcd_Cmd(z);
  2050  06AF  0878               	movf	Lcd_Set_Cursor@z,w
  2051  06B0  120A  118A  24C0  120A  118A  	fcall	_Lcd_Cmd
  2052  06B5                     l1170:
  2053                           
  2054                           ;lcd.c: 67:   Lcd_Cmd(y);
  2055  06B5  0879               	movf	Lcd_Set_Cursor@y,w
  2056  06B6  120A  118A  24C0  120A  118A  	fcall	_Lcd_Cmd
  2057  06BB                     l173:
  2058  06BB  0008               	return
  2059  06BC                     __end_of_Lcd_Set_Cursor:
  2060                           
  2061                           	psect	text11
  2062  048D                     __ptext11:	
  2063 ;; *************** function _Lcd_Clear *****************
  2064 ;; Defined at:
  2065 ;;		line 44 in file "lcd.c"
  2066 ;; Parameters:    Size  Location     Type
  2067 ;;		None
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;		None
  2070 ;; Return value:  Size  Location     Type
  2071 ;;                  1    wreg      void 
  2072 ;; Registers used:
  2073 ;;		wreg, status,2, status,0, pclath, cstack
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2079 ;;      Params:         0       0       0       0       0
  2080 ;;      Locals:         0       0       0       0       0
  2081 ;;      Temps:          0       0       0       0       0
  2082 ;;      Totals:         0       0       0       0       0
  2083 ;;Total ram usage:        0 bytes
  2084 ;; Hardware stack levels used:    1
  2085 ;; Hardware stack levels required when called:    2
  2086 ;; This function calls:
  2087 ;;		_Lcd_Cmd
  2088 ;; This function is called by:
  2089 ;;		_Servocontrol
  2090 ;; This function uses a non-reentrant model
  2091 ;;
  2092                           
  2093                           
  2094                           ;psect for function _Lcd_Clear
  2095  048D                     _Lcd_Clear:
  2096  048D                     l918:	
  2097                           ;incstack = 0
  2098                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2099                           
  2100                           
  2101                           ;lcd.c: 46:  Lcd_Cmd(0);
  2102  048D  3000               	movlw	0
  2103  048E  120A  118A  24C0  120A  118A  	fcall	_Lcd_Cmd
  2104                           
  2105                           ;lcd.c: 47:  Lcd_Cmd(1);
  2106  0493  3001               	movlw	1
  2107  0494  120A  118A  24C0  120A  118A  	fcall	_Lcd_Cmd
  2108  0499                     l167:
  2109  0499  0008               	return
  2110  049A                     __end_of_Lcd_Clear:
  2111                           
  2112                           	psect	text12
  2113  061B                     __ptext12:	
  2114 ;; *************** function _ADC_Read *****************
  2115 ;; Defined at:
  2116 ;;		line 27 in file "adc.c"
  2117 ;; Parameters:    Size  Location     Type
  2118 ;;  ADC_channel     1    wreg     unsigned char 
  2119 ;; Auto vars:     Size  Location     Type
  2120 ;;  ADC_channel     1    5[COMMON] unsigned char 
  2121 ;;  result          2    3[COMMON] unsigned int 
  2122 ;; Return value:  Size  Location     Type
  2123 ;;                  2    0[COMMON] unsigned int 
  2124 ;; Registers used:
  2125 ;;		wreg, status,2, status,0
  2126 ;; Tracked objects:
  2127 ;;		On entry : 0/0
  2128 ;;		On exit  : 0/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2131 ;;      Params:         2       0       0       0       0
  2132 ;;      Locals:         3       0       0       0       0
  2133 ;;      Temps:          1       0       0       0       0
  2134 ;;      Totals:         6       0       0       0       0
  2135 ;;Total ram usage:        6 bytes
  2136 ;; Hardware stack levels used:    1
  2137 ;; This function calls:
  2138 ;;		Nothing
  2139 ;; This function is called by:
  2140 ;;		_Servocontrol
  2141 ;;		_main
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           
  2146                           ;psect for function _ADC_Read
  2147  061B                     _ADC_Read:
  2148                           
  2149                           ;incstack = 0
  2150                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  2151                           ;ADC_Read@ADC_channel stored from wreg
  2152  061B  00F5               	movwf	ADC_Read@ADC_channel
  2153  061C                     l1128:
  2154                           
  2155                           ;adc.c: 29:     if(ADC_channel < 0 || ADC_channel > 7)
  2156  061C  3008               	movlw	8
  2157  061D  0275               	subwf	ADC_Read@ADC_channel,w
  2158  061E  1C03               	skipc
  2159  061F  2E21               	goto	u491
  2160  0620  2E22               	goto	u490
  2161  0621                     u491:
  2162  0621  2E25               	goto	l77
  2163  0622                     u490:
  2164  0622                     l1130:
  2165                           
  2166                           ;adc.c: 30:         return 0;
  2167  0622  01F0               	clrf	?_ADC_Read
  2168  0623  01F1               	clrf	?_ADC_Read+1
  2169  0624  2E69               	goto	l78
  2170  0625                     l77:
  2171                           
  2172                           ;adc.c: 33:     CHS0 = (ADC_channel & 1) >> 0;
  2173  0625  1875               	btfsc	ADC_Read@ADC_channel,0
  2174  0626  2E28               	goto	u501
  2175  0627  2E2C               	goto	u500
  2176  0628                     u501:
  2177  0628  1283               	bcf	3,5	;RP0=0, select bank0
  2178  0629  1303               	bcf	3,6	;RP1=0, select bank0
  2179  062A  159F               	bsf	31,3	;volatile
  2180  062B  2E2F               	goto	u514
  2181  062C                     u500:
  2182  062C  1283               	bcf	3,5	;RP0=0, select bank0
  2183  062D  1303               	bcf	3,6	;RP1=0, select bank0
  2184  062E  119F               	bcf	31,3	;volatile
  2185  062F                     u514:
  2186  062F                     l1134:
  2187                           
  2188                           ;adc.c: 34:     CHS1 = (ADC_channel & 2) >> 1;
  2189  062F  0875               	movf	ADC_Read@ADC_channel,w
  2190  0630  00F2               	movwf	??_ADC_Read
  2191  0631  3001               	movlw	1
  2192  0632                     u525:
  2193  0632  1003               	clrc
  2194  0633  0CF2               	rrf	??_ADC_Read,f
  2195  0634  3EFF               	addlw	-1
  2196  0635  1D03               	skipz
  2197  0636  2E32               	goto	u525
  2198  0637  1872               	btfsc	??_ADC_Read,0
  2199  0638  2E3A               	goto	u531
  2200  0639  2E3E               	goto	u530
  2201  063A                     u531:
  2202  063A  1283               	bcf	3,5	;RP0=0, select bank0
  2203  063B  1303               	bcf	3,6	;RP1=0, select bank0
  2204  063C  161F               	bsf	31,4	;volatile
  2205  063D  2E41               	goto	u544
  2206  063E                     u530:
  2207  063E  1283               	bcf	3,5	;RP0=0, select bank0
  2208  063F  1303               	bcf	3,6	;RP1=0, select bank0
  2209  0640  121F               	bcf	31,4	;volatile
  2210  0641                     u544:
  2211                           
  2212                           ;adc.c: 35:     CHS2 = (ADC_channel & 4) >> 2;
  2213  0641  0875               	movf	ADC_Read@ADC_channel,w
  2214  0642  00F2               	movwf	??_ADC_Read
  2215  0643  3002               	movlw	2
  2216  0644                     u555:
  2217  0644  1003               	clrc
  2218  0645  0CF2               	rrf	??_ADC_Read,f
  2219  0646  3EFF               	addlw	-1
  2220  0647  1D03               	skipz
  2221  0648  2E44               	goto	u555
  2222  0649  1872               	btfsc	??_ADC_Read,0
  2223  064A  2E4C               	goto	u561
  2224  064B  2E50               	goto	u560
  2225  064C                     u561:
  2226  064C  1283               	bcf	3,5	;RP0=0, select bank0
  2227  064D  1303               	bcf	3,6	;RP1=0, select bank0
  2228  064E  169F               	bsf	31,5	;volatile
  2229  064F  2E53               	goto	u574
  2230  0650                     u560:
  2231  0650  1283               	bcf	3,5	;RP0=0, select bank0
  2232  0651  1303               	bcf	3,6	;RP1=0, select bank0
  2233  0652  129F               	bcf	31,5	;volatile
  2234  0653                     u574:
  2235  0653                     l1136:
  2236                           
  2237                           ;adc.c: 38:     _delay((unsigned long)((25)*(20000000/4000000.0)));
  2238  0653  3029               	movlw	41
  2239  0654  00F2               	movwf	??_ADC_Read
  2240  0655                     u727:
  2241  0655  0BF2               	decfsz	??_ADC_Read,f
  2242  0656  2E55               	goto	u727
  2243  0657  0000               	nop
  2244  0658                     l1138:
  2245                           
  2246                           ;adc.c: 41:     GO_DONE = 1;
  2247  0658  1283               	bcf	3,5	;RP0=0, select bank0
  2248  0659  1303               	bcf	3,6	;RP1=0, select bank0
  2249  065A  151F               	bsf	31,2	;volatile
  2250  065B                     l79:	
  2251                           ;adc.c: 44:     while(GO_DONE);
  2252                           
  2253  065B  191F               	btfsc	31,2	;volatile
  2254  065C  2E5E               	goto	u581
  2255  065D  2E5F               	goto	u580
  2256  065E                     u581:
  2257  065E  2E5B               	goto	l79
  2258  065F                     u580:
  2259  065F                     l1140:
  2260                           
  2261                           ;adc.c: 47:     uint16_t result = ((ADRESH << 8) + ADRESL);
  2262  065F  081E               	movf	30,w	;volatile
  2263  0660  00F4               	movwf	ADC_Read@result+1
  2264  0661  1683               	bsf	3,5	;RP0=1, select bank1
  2265  0662  1303               	bcf	3,6	;RP1=0, select bank1
  2266  0663  081E               	movf	30,w	;volatile
  2267  0664  00F3               	movwf	ADC_Read@result
  2268                           
  2269                           ;adc.c: 48:     return result;
  2270  0665  0874               	movf	ADC_Read@result+1,w
  2271  0666  00F1               	movwf	?_ADC_Read+1
  2272  0667  0873               	movf	ADC_Read@result,w
  2273  0668  00F0               	movwf	?_ADC_Read
  2274  0669                     l78:
  2275  0669  0008               	return
  2276  066A                     __end_of_ADC_Read:
  2277                           
  2278                           	psect	text13
  2279  06BC                     __ptext13:	
  2280 ;; *************** function _Lcd_Init *****************
  2281 ;; Defined at:
  2282 ;;		line 71 in file "lcd.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;		None
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;		None
  2287 ;; Return value:  Size  Location     Type
  2288 ;;                  1    wreg      void 
  2289 ;; Registers used:
  2290 ;;		wreg, status,2, status,0, pclath, cstack
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2296 ;;      Params:         0       0       0       0       0
  2297 ;;      Locals:         0       0       0       0       0
  2298 ;;      Temps:          2       0       0       0       0
  2299 ;;      Totals:         2       0       0       0       0
  2300 ;;Total ram usage:        2 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; Hardware stack levels required when called:    2
  2303 ;; This function calls:
  2304 ;;		_Lcd_Cmd
  2305 ;;		_Lcd_Port
  2306 ;; This function is called by:
  2307 ;;		_main
  2308 ;; This function uses a non-reentrant model
  2309 ;;
  2310                           
  2311                           
  2312                           ;psect for function _Lcd_Init
  2313  06BC                     _Lcd_Init:
  2314  06BC                     l970:	
  2315                           ;incstack = 0
  2316                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2317                           
  2318                           
  2319                           ;lcd.c: 73:   Lcd_Port(0x00);
  2320  06BC  3000               	movlw	0
  2321  06BD  120A  118A  24DA  120A  118A  	fcall	_Lcd_Port
  2322  06C2                     l972:
  2323                           
  2324                           ;lcd.c: 74:    _delay((unsigned long)((20)*(20000000/4000.0)));
  2325  06C2  3082               	movlw	130
  2326  06C3  00F5               	movwf	??_Lcd_Init+1
  2327  06C4  30DD               	movlw	221
  2328  06C5  00F4               	movwf	??_Lcd_Init
  2329  06C6                     u737:
  2330  06C6  0BF4               	decfsz	??_Lcd_Init,f
  2331  06C7  2EC6               	goto	u737
  2332  06C8  0BF5               	decfsz	??_Lcd_Init+1,f
  2333  06C9  2EC6               	goto	u737
  2334  06CA  2ECB               	nop2
  2335  06CB                     l974:
  2336                           
  2337                           ;lcd.c: 75:   Lcd_Cmd(0x03);
  2338  06CB  3003               	movlw	3
  2339  06CC  120A  118A  24C0  120A  118A  	fcall	_Lcd_Cmd
  2340                           
  2341                           ;lcd.c: 76:  _delay((unsigned long)((5)*(20000000/4000.0)));
  2342  06D1  3021               	movlw	33
  2343  06D2  00F5               	movwf	??_Lcd_Init+1
  2344  06D3  3076               	movlw	118
  2345  06D4  00F4               	movwf	??_Lcd_Init
  2346  06D5                     u747:
  2347  06D5  0BF4               	decfsz	??_Lcd_Init,f
  2348  06D6  2ED5               	goto	u747
  2349  06D7  0BF5               	decfsz	??_Lcd_Init+1,f
  2350  06D8  2ED5               	goto	u747
  2351  06D9  0000               	nop
  2352  06DA                     l976:
  2353                           
  2354                           ;lcd.c: 77:   Lcd_Cmd(0x03);
  2355  06DA  3003               	movlw	3
  2356  06DB  120A  118A  24C0  120A  118A  	fcall	_Lcd_Cmd
  2357  06E0                     l978:
  2358                           
  2359                           ;lcd.c: 78:  _delay((unsigned long)((11)*(20000000/4000.0)));
  2360  06E0  3048               	movlw	72
  2361  06E1  00F5               	movwf	??_Lcd_Init+1
  2362  06E2  306C               	movlw	108
  2363  06E3  00F4               	movwf	??_Lcd_Init
  2364  06E4                     u757:
  2365  06E4  0BF4               	decfsz	??_Lcd_Init,f
  2366  06E5  2EE4               	goto	u757
  2367  06E6  0BF5               	decfsz	??_Lcd_Init+1,f
  2368  06E7  2EE4               	goto	u757
  2369  06E8  0000               	nop
  2370                           
  2371                           ;lcd.c: 79:   Lcd_Cmd(0x03);
  2372  06E9  3003               	movlw	3
  2373  06EA  120A  118A  24C0  120A  118A  	fcall	_Lcd_Cmd
  2374                           
  2375                           ;lcd.c: 81:   Lcd_Cmd(0x02);
  2376  06EF  3002               	movlw	2
  2377  06F0  120A  118A  24C0  120A  118A  	fcall	_Lcd_Cmd
  2378                           
  2379                           ;lcd.c: 82:   Lcd_Cmd(0x02);
  2380  06F5  3002               	movlw	2
  2381  06F6  120A  118A  24C0  120A  118A  	fcall	_Lcd_Cmd
  2382                           
  2383                           ;lcd.c: 83:   Lcd_Cmd(0x08);
  2384  06FB  3008               	movlw	8
  2385  06FC  120A  118A  24C0  120A  118A  	fcall	_Lcd_Cmd
  2386                           
  2387                           ;lcd.c: 84:   Lcd_Cmd(0x00);
  2388  0701  3000               	movlw	0
  2389  0702  120A  118A  24C0  120A  118A  	fcall	_Lcd_Cmd
  2390                           
  2391                           ;lcd.c: 85:   Lcd_Cmd(0x0C);
  2392  0707  300C               	movlw	12
  2393  0708  120A  118A  24C0  120A  118A  	fcall	_Lcd_Cmd
  2394                           
  2395                           ;lcd.c: 86:   Lcd_Cmd(0x00);
  2396  070D  3000               	movlw	0
  2397  070E  120A  118A  24C0  120A  118A  	fcall	_Lcd_Cmd
  2398                           
  2399                           ;lcd.c: 87:   Lcd_Cmd(0x06);
  2400  0713  3006               	movlw	6
  2401  0714  120A  118A  24C0  120A  118A  	fcall	_Lcd_Cmd
  2402  0719                     l176:
  2403  0719  0008               	return
  2404  071A                     __end_of_Lcd_Init:
  2405                           
  2406                           	psect	text14
  2407  04C0                     __ptext14:	
  2408 ;; *************** function _Lcd_Cmd *****************
  2409 ;; Defined at:
  2410 ;;		line 34 in file "lcd.c"
  2411 ;; Parameters:    Size  Location     Type
  2412 ;;  a               1    wreg     unsigned char 
  2413 ;; Auto vars:     Size  Location     Type
  2414 ;;  a               1    3[COMMON] unsigned char 
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  1    wreg      void 
  2417 ;; Registers used:
  2418 ;;		wreg, status,2, status,0, pclath, cstack
  2419 ;; Tracked objects:
  2420 ;;		On entry : 0/0
  2421 ;;		On exit  : 0/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2424 ;;      Params:         0       0       0       0       0
  2425 ;;      Locals:         1       0       0       0       0
  2426 ;;      Temps:          2       0       0       0       0
  2427 ;;      Totals:         3       0       0       0       0
  2428 ;;Total ram usage:        3 bytes
  2429 ;; Hardware stack levels used:    1
  2430 ;; Hardware stack levels required when called:    1
  2431 ;; This function calls:
  2432 ;;		_Lcd_Port
  2433 ;; This function is called by:
  2434 ;;		_Lcd_Clear
  2435 ;;		_Lcd_Set_Cursor
  2436 ;;		_Lcd_Init
  2437 ;;		_Lcd_Shift_Right
  2438 ;;		_Lcd_Shift_Left
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           
  2443                           ;psect for function _Lcd_Cmd
  2444  04C0                     _Lcd_Cmd:
  2445                           
  2446                           ;incstack = 0
  2447                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2448                           ;Lcd_Cmd@a stored from wreg
  2449  04C0  00F3               	movwf	Lcd_Cmd@a
  2450  04C1                     l864:
  2451                           
  2452                           ;lcd.c: 34: void Lcd_Cmd(char a);lcd.c: 35: {;lcd.c: 36:  RB1 = 0;
  2453  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  2454  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  2455  04C3  1086               	bcf	6,1	;volatile
  2456  04C4                     l866:
  2457                           
  2458                           ;lcd.c: 38:  Lcd_Port(a);
  2459  04C4  0873               	movf	Lcd_Cmd@a,w
  2460  04C5  120A  118A  24DA  120A  118A  	fcall	_Lcd_Port
  2461  04CA                     l868:
  2462                           
  2463                           ;lcd.c: 39:  RB2 = 1;
  2464  04CA  1283               	bcf	3,5	;RP0=0, select bank0
  2465  04CB  1303               	bcf	3,6	;RP1=0, select bank0
  2466  04CC  1506               	bsf	6,2	;volatile
  2467  04CD                     l870:
  2468                           
  2469                           ;lcd.c: 40:         _delay((unsigned long)((4)*(20000000/4000.0)));
  2470  04CD  301A               	movlw	26
  2471  04CE  00F2               	movwf	??_Lcd_Cmd+1
  2472  04CF  30F8               	movlw	248
  2473  04D0  00F1               	movwf	??_Lcd_Cmd
  2474  04D1                     u767:
  2475  04D1  0BF1               	decfsz	??_Lcd_Cmd,f
  2476  04D2  2CD1               	goto	u767
  2477  04D3  0BF2               	decfsz	??_Lcd_Cmd+1,f
  2478  04D4  2CD1               	goto	u767
  2479  04D5  0000               	nop
  2480  04D6                     l872:
  2481                           
  2482                           ;lcd.c: 41:         RB2 = 0;
  2483  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  2484  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  2485  04D8  1106               	bcf	6,2	;volatile
  2486  04D9                     l164:
  2487  04D9  0008               	return
  2488  04DA                     __end_of_Lcd_Cmd:
  2489                           
  2490                           	psect	text15
  2491  04DA                     __ptext15:	
  2492 ;; *************** function _Lcd_Port *****************
  2493 ;; Defined at:
  2494 ;;		line 12 in file "lcd.c"
  2495 ;; Parameters:    Size  Location     Type
  2496 ;;  a               1    wreg     unsigned char 
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;  a               1    0[COMMON] unsigned char 
  2499 ;; Return value:  Size  Location     Type
  2500 ;;                  1    wreg      void 
  2501 ;; Registers used:
  2502 ;;		wreg
  2503 ;; Tracked objects:
  2504 ;;		On entry : 0/0
  2505 ;;		On exit  : 0/0
  2506 ;;		Unchanged: 0/0
  2507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2508 ;;      Params:         0       0       0       0       0
  2509 ;;      Locals:         1       0       0       0       0
  2510 ;;      Temps:          0       0       0       0       0
  2511 ;;      Totals:         1       0       0       0       0
  2512 ;;Total ram usage:        1 bytes
  2513 ;; Hardware stack levels used:    1
  2514 ;; This function calls:
  2515 ;;		Nothing
  2516 ;; This function is called by:
  2517 ;;		_Lcd_Cmd
  2518 ;;		_Lcd_Init
  2519 ;;		_Lcd_Write_Char
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522                           
  2523                           
  2524                           ;psect for function _Lcd_Port
  2525  04DA                     _Lcd_Port:
  2526                           
  2527                           ;incstack = 0
  2528                           ; Regs used in _Lcd_Port: [wreg]
  2529                           ;Lcd_Port@a stored from wreg
  2530  04DA  00F0               	movwf	Lcd_Port@a
  2531  04DB                     l806:
  2532                           
  2533                           ;lcd.c: 12: void Lcd_Port(char a);lcd.c: 13: {;lcd.c: 14:  if(a & 1)
  2534  04DB  1C70               	btfss	Lcd_Port@a,0
  2535  04DC  2CDE               	goto	u11
  2536  04DD  2CDF               	goto	u10
  2537  04DE                     u11:
  2538  04DE  2CE3               	goto	l153
  2539  04DF                     u10:
  2540  04DF                     l808:
  2541                           
  2542                           ;lcd.c: 15:   RD4 = 1;
  2543  04DF  1283               	bcf	3,5	;RP0=0, select bank0
  2544  04E0  1303               	bcf	3,6	;RP1=0, select bank0
  2545  04E1  1608               	bsf	8,4	;volatile
  2546  04E2  2CE6               	goto	l154
  2547  04E3                     l153:	
  2548                           ;lcd.c: 16:  else
  2549                           
  2550                           
  2551                           ;lcd.c: 17:   RD4 = 0;
  2552  04E3  1283               	bcf	3,5	;RP0=0, select bank0
  2553  04E4  1303               	bcf	3,6	;RP1=0, select bank0
  2554  04E5  1208               	bcf	8,4	;volatile
  2555  04E6                     l154:
  2556                           
  2557                           ;lcd.c: 19:  if(a & 2)
  2558  04E6  1CF0               	btfss	Lcd_Port@a,1
  2559  04E7  2CE9               	goto	u21
  2560  04E8  2CEA               	goto	u20
  2561  04E9                     u21:
  2562  04E9  2CEC               	goto	l155
  2563  04EA                     u20:
  2564  04EA                     l810:
  2565                           
  2566                           ;lcd.c: 20:   RD5 = 1;
  2567  04EA  1688               	bsf	8,5	;volatile
  2568  04EB  2CED               	goto	l156
  2569  04EC                     l155:	
  2570                           ;lcd.c: 21:  else
  2571                           
  2572                           
  2573                           ;lcd.c: 22:   RD5 = 0;
  2574  04EC  1288               	bcf	8,5	;volatile
  2575  04ED                     l156:
  2576                           
  2577                           ;lcd.c: 24:  if(a & 4)
  2578  04ED  1D70               	btfss	Lcd_Port@a,2
  2579  04EE  2CF0               	goto	u31
  2580  04EF  2CF1               	goto	u30
  2581  04F0                     u31:
  2582  04F0  2CF3               	goto	l157
  2583  04F1                     u30:
  2584  04F1                     l812:
  2585                           
  2586                           ;lcd.c: 25:   RD6 = 1;
  2587  04F1  1708               	bsf	8,6	;volatile
  2588  04F2  2CF4               	goto	l158
  2589  04F3                     l157:	
  2590                           ;lcd.c: 26:  else
  2591                           
  2592                           
  2593                           ;lcd.c: 27:   RD6 = 0;
  2594  04F3  1308               	bcf	8,6	;volatile
  2595  04F4                     l158:
  2596                           
  2597                           ;lcd.c: 29:  if(a & 8)
  2598  04F4  1DF0               	btfss	Lcd_Port@a,3
  2599  04F5  2CF7               	goto	u41
  2600  04F6  2CF8               	goto	u40
  2601  04F7                     u41:
  2602  04F7  2CFA               	goto	l159
  2603  04F8                     u40:
  2604  04F8                     l814:
  2605                           
  2606                           ;lcd.c: 30:   RD7 = 1;
  2607  04F8  1788               	bsf	8,7	;volatile
  2608  04F9  2CFB               	goto	l161
  2609  04FA                     l159:	
  2610                           ;lcd.c: 31:  else
  2611                           
  2612                           
  2613                           ;lcd.c: 32:   RD7 = 0;
  2614  04FA  1388               	bcf	8,7	;volatile
  2615  04FB                     l161:
  2616  04FB  0008               	return
  2617  04FC                     __end_of_Lcd_Port:
  2618  007E                     btemp	set	126	;btemp
  2619  007E                     wtemp0	set	126
  2620                           
  2621                           	psect	config
  2622                           
  2623                           ;Config register CONFIG @ 0x2007
  2624                           ;	Oscillator Selection bits
  2625                           ;	FOSC = HS, HS oscillator
  2626                           ;	Watchdog Timer Enable bit
  2627                           ;	WDTE = OFF, WDT disabled
  2628                           ;	Power-up Timer Enable bit
  2629                           ;	PWRTE = ON, PWRT enabled
  2630                           ;	Brown-out Reset Enable bit
  2631                           ;	BOREN = ON, BOR enabled
  2632                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2633                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  2634                           ;	Data EEPROM Memory Code Protection bit
  2635                           ;	CPD = OFF, Data EEPROM code protection off
  2636                           ;	Flash Program Memory Write Enable bits
  2637                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2638                           ;	In-Circuit Debugger Mode bit
  2639                           ;	DEBUG = 0x1, unprogrammed default
  2640                           ;	Flash Program Memory Code Protection bit
  2641                           ;	CP = OFF, Code protection off
  2642  2007                     	org	8199
  2643  2007  3F72               	dw	16242

Data Sizes:
    Strings     15
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     15      15
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[7]), STR_1(CODE[8]), 


Critical Paths under _main in COMMON

    _setPWM_DutyCycle->_ADC_Read
    _tsSetPulse->_tsDelay
    _tsDelay->___awdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_Servocontrol
    _Servocontrol->_tsSetPulse
    _tsSetPulse->_tsDelay

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2724
                                             13 BANK0      2     2      0
                           _ADC_Read
                           _Lcd_Init
                       _Servocontrol
                           _init_ADC
                           _init_PWM
                   _setPWM_DutyCycle
 ---------------------------------------------------------------------------------
 (1) _setPWM_DutyCycle                                     4     2      2     120
                                              6 COMMON     4     2      2
                           _ADC_Read (ARG)
 ---------------------------------------------------------------------------------
 (1) _init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Servocontrol                                         3     3      0    2358
                                             10 BANK0      3     3      0
                           _ADC_Read
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _tsSetPulse
 ---------------------------------------------------------------------------------
 (2) _tsSetPulse                                           8     2      6    1399
                                              2 BANK0      8     2      6
                            _tsDelay
 ---------------------------------------------------------------------------------
 (3) _tsDelay                                              6     4      2     649
                                              9 COMMON     4     2      2
                                              0 BANK0      2     2      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     452
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     3     3      0     276
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     120
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1     497
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _ADC_Read                                             6     4      2     111
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     135
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0      75
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      60
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Servocontrol
     _ADC_Read
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _tsSetPulse
       _tsDelay
         ___awdiv
   _init_ADC
   _init_PWM
   _setPWM_DutyCycle
     _ADC_Read (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      F       F       5       18.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Fri Dec 25 12:37:38 2020

                        pc 0002                         l31 07FB                         l74 04A7  
                       l77 0625                         l78 0669                         l79 065B  
                       u10 04DF                         u11 04DE                         u20 04EA  
                       u21 04E9                         u30 04F1                         u31 04F0  
                       u40 04F8                         u41 04F7                         _WR 0C61  
             ___awdiv@sign 0076                         fsr 0004          ?_setPWM_DutyCycle 0076  
                      l120 0562                        l112 04BF                        l105 0529  
                      l122 057B                        l106 0547                        l107 052E  
                      l108 0533                        l109 054D                        l126 057D  
                      l128 05AB                        l161 04FB                        l153 04E3  
                      l154 04E6                        l155 04EC                        l156 04ED  
                      l164 04D9                        l157 04F3                        l173 06BB  
                      l158 04F4                        l159 04FA                        l167 0499  
                      l176 0719                        l185 0520                        l179 061A  
                      l453 0780                        l810 04EA                        l812 04F1  
                      l814 04F8                        l806 04DB                        l808 04DF  
                      l870 04CD                        l918 048D                        l872 04D6  
                      l864 04C1                        l880 05FE                        l866 04C4  
                      l970 06BC                        l890 0612                        l882 0601  
                      l874 05E3                        l868 04CA                        l972 06C2  
                      l892 0617                        l884 0606                        l876 05ED  
                      l980 049A                        l974 06CB                        l886 0609  
                      l878 05F0                        l982 0521                        l976 06DA  
                      l888 060F                        l984 0537                        l978 06E0  
                      l986 0549                        _GIE 005F                        _RB1 0031  
                      _RB2 0032                        _RB3 0033                        _RD4 0044  
                      _RD5 0045                        _RD6 0046                        _RD7 0047  
                      u400 073B                        u401 073A                        u500 062C  
                      u420 074D                        u501 0628                        u165 05F3  
                      u421 074C                        _PR2 0092                        u415 073F  
                      u600 0670                        u440 075E                        u601 066F  
                      u441 075D                        u530 063E                        u514 062F  
                      u531 063A                        u435 074E                        u620 0699  
                      u460 0772                        u380 071F                        u525 0632  
                      u621 0698                        u461 0771                        u445 075A  
                      u381 071E                        u470 0777                        u390 072A  
                      u615 0678                        u471 0776                        u455 0766  
                      u391 0729                        u560 0650                        u544 0641  
                      u640 0520                        u480 057B                        u561 064C  
                      u641 051F                        u481 057A                        u490 0622  
                      u650 0790                        u555 0644                        u491 0621  
                      u635 06A1                        u707 0603                        u651 078F  
                      u580 065F                        u660 04AF                        u581 065E  
                      u717 0614                        u485 0577                        u661 04AB  
                      u574 0653                        u590 05AB                        u727 0655  
                      u591 05AA                        u737 06C6                        u674 04B2  
                      u747 06D5                        u595 05A7                        u757 06E4  
                      u767 04D1                        u687 07AB                        u697 07E1  
                      fsr0 0004         ??_setPWM_DutyCycle 0078                       l1100 073E  
                     l1110 0764                       l1102 0745                       l1120 077C  
                     l1112 0765                       l1104 0749                       l1200 07F5  
                     l1130 0622                       l1114 076C                       l1106 074D  
                     l1202 04A8                       l1210 05B2                       l1140 065F  
                     l1108 075E                       l1116 0772                       l1124 054E  
                     l1204 04B3                       l1212 05B7                       l1134 062F  
                     l1118 0777                       l1126 0565                       l1150 0595  
                     l1214 05BC                       l1206 05AC                       l1136 0653  
                     l1128 061C                       l1160 068C                       l1152 066B  
                     l1080 071A                       l1144 057C                       l1216 05C1  
                     l1208 05B0                       l1138 0658                       l1170 06B5  
                     l1154 0670                       l1162 0693                       l1090 072A  
                     l1082 071B                       l1146 0580                       l1218 05D9  
                     l1164 0699                       l1156 0681                       l1172 04FD  
                     l1092 072F                       l1084 071F                       l1148 0589  
                     l1180 0781                       l1166 06AA                       l1158 0686  
                     l1174 0500                       l1094 0733                       l1086 0724  
                     l1190 07BF                       l1182 0790                       l1246 053C  
                     l1168 06AF                       l1176 050D                       l1096 0735  
                     l1088 0726                       l1184 07A3                       l1192 07C6  
                     l1178 0513                       l1098 073B                       l1194 07D9  
                     l1186 07B2                       l1196 07E8                       l1188 07B7  
                     l1198 07ED                       _ADFM 04FF                       _ADON 00F8  
                     _CHS0 00FB                       _CHS1 00FC                       _CHS2 00FD  
                     STR_1 0009                       STR_2 0011          ?_Lcd_Write_String 0070  
                     _main 05AC                       btemp 007E           __end_of_ADC_Read 066A  
                     start 0000         ??_Lcd_Write_String 0075            __end_of_Lcd_Cmd 04DA  
                    _ADCS0 00FE                      _ADCS1 00FF                      _ADCS2 04FE  
                    ?_main 0070                      _CCP1X 00BD                      _CCP1Y 00BC  
          __end_of___awdiv 0781                      _EEADR 010D                      _EEPGD 0C67  
          ___awdiv@divisor 0070                      _PCFG0 04F8                      _PCFG1 04F9  
                    _PCFG2 04FA                      _PCFG3 04FB            ___awdiv@counter 0075  
  __size_of_Lcd_Set_Cursor 0052                      _TRISB 0086                      _TRISC 0087  
                    _TRISD 0088            __end_of_tsDelay 057C                      pclath 000A  
                    status 0003                      wtemp0 007E           __end_of_Lcd_Init 071A  
         __end_of_Lcd_Port 04FC            __initialization 07FC               __end_of_main 05E2  
                   ??_main 002D         __size_of_Lcd_Clear 000D                     _CCP1M2 00BA  
                   _CCP1M3 00BB                     _ADRESH 001E                     _ADRESL 009E  
                   _EEDATA 010C                     _CCPR1L 0015                     _EECON2 018D  
         ___awdiv@dividend 0072                  ??_Lcd_Cmd 0071                     _TMR2ON 0092  
  __size_of_Lcd_Write_Char 0039                     _TRISC2 043A                  ??___awdiv 0074  
         __end_of_init_ADC 04A8           __end_of_init_PWM 054E           ___awdiv@quotient 0077  
                ?_ADC_Read 0070                  ??_tsDelay 007B            Lcd_Set_Cursor@a 0077  
          Lcd_Set_Cursor@b 0074            Lcd_Set_Cursor@y 0079            Lcd_Set_Cursor@z 0078  
  __end_of__initialization 07FC          __end_of_Lcd_Clear 049A             __pcstackCOMMON 0070  
           _Lcd_Set_Cursor 066A                 ??_ADC_Read 0072                  ?_Lcd_Init 0070  
                ?_Lcd_Port 0070  __size_of_setPWM_DutyCycle 0018                 __pmaintext 05AC  
      ADC_Read@ADC_channel 0075  __size_of_Lcd_Write_String 0025     __end_of_Lcd_Set_Cursor 06BC  
                  _T2CKPS0 0090                    _T2CKPS1 0091                    _GO_DONE 00FA  
               ??_Lcd_Init 0074                 ??_Lcd_Port 0070                 __stringtab 0003  
                ?_init_ADC 0070             _Lcd_Write_Char 05E2                  ?_init_PWM 0070  
                  _Lcd_Cmd 04C0              ?_Servocontrol 0070                    ___awdiv 071A  
          ?_Lcd_Set_Cursor 0074                    __ptext1 04A8                    __ptext2 0521  
                  __ptext3 049A                    __ptext4 0781                    __ptext5 057C  
                  __ptext6 054E                    __ptext7 071A                    __ptext8 04FC  
                  __ptext9 05E2                    _tsDelay 054E     __end_of_Lcd_Write_Char 061B  
     end_of_initialization 07FC                 ??_init_ADC 0070                 ??_init_PWM 0070  
           ??_Servocontrol 002A                 _tsSetPulse 057C                  Lcd_Port@a 0070  
        __size_of_ADC_Read 004F            ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0077  
        Lcd_Write_String@i 0075           _setPWM_DutyCycle 04A8                  _Lcd_Clear 048D  
         _Lcd_Write_String 04FC        start_initialization 07FC          __size_of_Lcd_Init 005E  
        __size_of_Lcd_Port 0022                 ?_Lcd_Clear 0070                ?_tsSetPulse 0022  
          Lcd_Write_Char@a 0074            Lcd_Write_Char@y 0073             tsSetPulse@freq 0026  
           ADC_Read@result 0073                  ___latbits 0002               tsDelay@delay 0020  
            __pcstackBANK0 0020       __end_of_Servocontrol 07FC                   ?_Lcd_Cmd 0070  
        __size_of_init_ADC 000E          __size_of_init_PWM 002D           ??_Lcd_Set_Cursor 0075  
                 ?___awdiv 0070                  __pstrings 0003                   _ADC_Read 061B  
                 ?_tsDelay 0079        __size_of_tsSetPulse 0030                   Lcd_Cmd@a 0073  
              ??_Lcd_Clear 0074   __end_of_setPWM_DutyCycle 04C0                __stringbase 0008  
         ??_Lcd_Write_Char 0071         setPWM_DutyCycle@DC 0076                   _Lcd_Init 06BC  
                 _Lcd_Port 04DA   __end_of_Lcd_Write_String 0521           __size_of_Lcd_Cmd 001A  
               _EECON1bits 018C           __size_of___awdiv 0067         __end_of__stringtab 0009  
    __size_of_Servocontrol 007B           __size_of_tsDelay 002E                   __ptext10 066A  
                 __ptext11 048D                   __ptext12 061B                   __ptext13 06BC  
                 __ptext14 04C0                   __ptext15 04DA                   _init_ADC 049A  
                 _init_PWM 0521              __size_of_main 0036               ??_tsSetPulse 0028  
             _Servocontrol 0781               tsSetPulse@p1 0022               tsSetPulse@p2 0024  
       Lcd_Write_Char@temp 0072         __end_of_tsSetPulse 05AC                   tsDelay@d 0079  
                stringcode 0003         Lcd_Set_Cursor@temp 007A                   stringdir 0003  
                 stringtab 0003  
